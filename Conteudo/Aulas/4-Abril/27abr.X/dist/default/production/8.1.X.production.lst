

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Wed Apr 27 17:45:25 2022

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    45  0000                     
    46                           ; Version 2.10
    47                           ; Generated 31/07/2019 GMT
    48                           ; 
    49                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    50                           ; All rights reserved.
    51                           ; 
    52                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    53                           ; 
    54                           ; Redistribution and use in source and binary forms, with or without modification, are
    55                           ; permitted provided that the following conditions are met:
    56                           ; 
    57                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    58                           ;        conditions and the following disclaimer.
    59                           ; 
    60                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    61                           ;        of conditions and the following disclaimer in the documentation and/or other
    62                           ;        materials provided with the distribution.
    63                           ; 
    64                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    65                           ;        software without specific prior written permission.
    66                           ; 
    67                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    68                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    69                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    70                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    71                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    72                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    73                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    74                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    75                           ; 
    76                           ; 
    77                           ; Code-generator required, PIC18F4550 Definitions
    78                           ; 
    79                           ; SFR Addresses
    80  0000                     
    81                           	psect	idataBANK0
    82  001822                     __pidataBANK0:
    83                           	opt callstack 0
    84                           
    85                           ;initializer for _BackLight_State
    86  001822  08                 	db	8
    87                           
    88                           	psect	nvBANK0
    89  0000A2                     __pnvBANK0:
    90                           	opt callstack 0
    91  0000A2                     _i2c_add:
    92                           	opt callstack 0
    93  0000A2                     	ds	1
    94  0000                     _SSPBUF	set	4041
    95  0000                     _TRISBbits	set	3987
    96  0000                     _SSPADD	set	4040
    97  0000                     _SSPSTAT	set	4039
    98  0000                     _SSPCON2	set	4037
    99  0000                     _SSPCON1	set	4038
   100  0000                     _RCEN	set	32299
   101  0000                     _ACKSTAT	set	32302
   102  0000                     _SSPIF	set	31987
   103  0000                     _ACKEN	set	32300
   104  0000                     _ACKDT	set	32301
   105  0000                     _PEN	set	32298
   106  0000                     _RSEN	set	32297
   107  0000                     _SEN	set	32296
   108                           
   109                           	psect	smallconst
   110  000800                     __psmallconst:
   111                           	opt callstack 0
   112  000800  00                 	db	0
   113  000801                     STR_1:
   114  000801  25                 	db	37
   115  000802  64                 	db	100	;'d'
   116  000803  00                 	db	0
   117  000804                     STR_2:
   118  000804  3A                 	db	58	;':'
   119  000805  00                 	db	0
   120                           
   121                           ; #config settings
   122  000806  00                 	db	0	; dummy byte at the end
   123  0000                     
   124                           	psect	cinit
   125  00170A                     __pcinit:
   126                           	opt callstack 0
   127  00170A                     start_initialization:
   128                           	opt callstack 0
   129  00170A                     __initialization:
   130                           	opt callstack 0
   131                           
   132                           ; Initialize objects allocated to BANK0 (1 bytes)
   133                           ; load TBLPTR registers with __pidataBANK0
   134  00170A  0E22               	movlw	low __pidataBANK0
   135  00170C  6EF6               	movwf	tblptrl,c
   136  00170E  0E18               	movlw	high __pidataBANK0
   137  001710  6EF7               	movwf	tblptrh,c
   138  001712  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   139  001714  6EF8               	movwf	tblptru,c
   140  001716  0009               	tblrd		*+	;fetch initializer
   141  001718  CFF5 F0A3          	movff	tablat,__pdataBANK0
   142                           
   143                           ; Clear objects allocated to BANK0 (49 bytes)
   144  00171C  EE00  F060         	lfsr	0,__pbssBANK0
   145  001720  0E31               	movlw	49
   146  001722                     clear_0:
   147  001722  6AEE               	clrf	postinc0,c
   148  001724  06E8               	decf	wreg,f,c
   149  001726  E1FD               	bnz	clear_0
   150  001728                     end_of_initialization:
   151                           	opt callstack 0
   152  001728                     __end_of__initialization:
   153                           	opt callstack 0
   154  001728  0E00               	movlw	low (__Lmediumconst shr (0+16))
   155  00172A  6EF8               	movwf	tblptru,c
   156  00172C  0100               	movlb	0
   157  00172E  EF9E  F009         	goto	_main	;jump to C main() function
   158                           
   159                           	psect	bssBANK0
   160  000060                     __pbssBANK0:
   161                           	opt callstack 0
   162  000060                     _nout:
   163                           	opt callstack 0
   164  000060                     	ds	2
   165  000062                     _width:
   166                           	opt callstack 0
   167  000062                     	ds	2
   168  000064                     _prec:
   169                           	opt callstack 0
   170  000064                     	ds	2
   171  000066                     _flags:
   172                           	opt callstack 0
   173  000066                     	ds	2
   174  000068                     _segundos:
   175                           	opt callstack 0
   176  000068                     	ds	2
   177  00006A                     _minutos:
   178                           	opt callstack 0
   179  00006A                     	ds	2
   180  00006C                     _dir:
   181                           	opt callstack 0
   182  00006C                     	ds	2
   183  00006E                     _esq:
   184                           	opt callstack 0
   185  00006E                     	ds	2
   186  000070                     _RS:
   187                           	opt callstack 0
   188  000070                     	ds	1
   189  000071                     _dbuf:
   190                           	opt callstack 0
   191  000071                     	ds	32
   192                           
   193                           	psect	dataBANK0
   194  0000A3                     __pdataBANK0:
   195                           	opt callstack 0
   196  0000A3                     _BackLight_State:
   197                           	opt callstack 0
   198  0000A3                     	ds	1
   199                           
   200                           	psect	cstackBANK0
   201  000091                     __pcstackBANK0:
   202                           	opt callstack 0
   203  000091                     	ds	2
   204  000093                     sprintf@ap:
   205                           	opt callstack 0
   206                           
   207                           ; 2 bytes @ 0x2
   208  000093                     	ds	2
   209  000095                     sprintf@f:
   210                           	opt callstack 0
   211                           
   212                           ; 6 bytes @ 0x4
   213  000095                     	ds	6
   214  00009B                     LCD_Write_Convert_String@text:
   215                           	opt callstack 0
   216                           
   217                           ; 2 bytes @ 0xA
   218  00009B                     	ds	2
   219  00009D                     LCD_Write_Convert_String@i:
   220                           	opt callstack 0
   221                           
   222                           ; 2 bytes @ 0xC
   223  00009D                     	ds	2
   224  00009F                     escreve_LCD@numero:
   225                           	opt callstack 0
   226                           
   227                           ; 2 bytes @ 0xE
   228  00009F                     	ds	2
   229  0000A1                     ??_main:
   230                           
   231                           ; 1 bytes @ 0x10
   232  0000A1                     	ds	1
   233                           
   234                           	psect	cstackCOMRAM
   235  000001                     __pcstackCOMRAM:
   236                           	opt callstack 0
   237  000001                     ??_I2C_Master_Wait:
   238  000001                     ?_strlen:
   239                           	opt callstack 0
   240  000001                     ?___awdiv:
   241                           	opt callstack 0
   242  000001                     ?___awmod:
   243                           	opt callstack 0
   244  000001                     ?___aodiv:
   245                           	opt callstack 0
   246  000001                     ?___aomod:
   247                           	opt callstack 0
   248  000001                     ___awdiv@dividend:
   249                           	opt callstack 0
   250  000001                     ___awmod@dividend:
   251                           	opt callstack 0
   252  000001                     fputc@c:
   253                           	opt callstack 0
   254  000001                     strlen@s:
   255                           	opt callstack 0
   256  000001                     ___aodiv@dividend:
   257                           	opt callstack 0
   258  000001                     ___aomod@dividend:
   259                           	opt callstack 0
   260                           
   261                           ; 8 bytes @ 0x0
   262  000001                     	ds	1
   263  000002                     I2C_Master_Write@data:
   264                           	opt callstack 0
   265                           
   266                           ; 1 bytes @ 0x1
   267  000002                     	ds	1
   268  000003                     IO_Expander_Write@Data:
   269                           	opt callstack 0
   270  000003                     ___awdiv@divisor:
   271                           	opt callstack 0
   272  000003                     ___awmod@divisor:
   273                           	opt callstack 0
   274  000003                     fputc@fp:
   275                           	opt callstack 0
   276  000003                     strlen@a:
   277                           	opt callstack 0
   278                           
   279                           ; 2 bytes @ 0x2
   280  000003                     	ds	1
   281  000004                     LCD_Write_4Bit@Nibble:
   282                           	opt callstack 0
   283                           
   284                           ; 1 bytes @ 0x3
   285  000004                     	ds	1
   286  000005                     ??_fputc:
   287  000005                     LCD_CMD@CMD:
   288                           	opt callstack 0
   289  000005                     LCD_Write_Char@Data:
   290                           	opt callstack 0
   291  000005                     ___awdiv@counter:
   292                           	opt callstack 0
   293  000005                     ___awmod@counter:
   294                           	opt callstack 0
   295                           
   296                           ; 1 bytes @ 0x4
   297  000005                     	ds	1
   298  000006                     ??_LCD_Init:
   299  000006                     LCD_Set_Cursor@COL:
   300                           	opt callstack 0
   301  000006                     ___awdiv@sign:
   302                           	opt callstack 0
   303  000006                     ___awmod@sign:
   304                           	opt callstack 0
   305  000006                     LCD_Write_String@Str:
   306                           	opt callstack 0
   307                           
   308                           ; 2 bytes @ 0x5
   309  000006                     	ds	1
   310  000007                     ??_LCD_Set_Cursor:
   311  000007                     LCD_Init@I2C_Add:
   312                           	opt callstack 0
   313  000007                     ___awdiv@quotient:
   314                           	opt callstack 0
   315                           
   316                           ; 2 bytes @ 0x6
   317  000007                     	ds	1
   318  000008                     ??_LCD_Write_String:
   319                           
   320                           ; 1 bytes @ 0x7
   321  000008                     	ds	1
   322  000009                     LCD_Set_Cursor@ROW:
   323                           	opt callstack 0
   324  000009                     ___aodiv@divisor:
   325                           	opt callstack 0
   326  000009                     ___aomod@divisor:
   327                           	opt callstack 0
   328                           
   329                           ; 8 bytes @ 0x8
   330  000009                     	ds	1
   331  00000A                     LCD_Write_String@i:
   332                           	opt callstack 0
   333  00000A                     fputs@s:
   334                           	opt callstack 0
   335                           
   336                           ; 2 bytes @ 0x9
   337  00000A                     	ds	2
   338  00000C                     fputs@fp:
   339                           	opt callstack 0
   340                           
   341                           ; 2 bytes @ 0xB
   342  00000C                     	ds	2
   343  00000E                     fputs@c:
   344                           	opt callstack 0
   345                           
   346                           ; 1 bytes @ 0xD
   347  00000E                     	ds	1
   348  00000F                     fputs@i:
   349                           	opt callstack 0
   350                           
   351                           ; 2 bytes @ 0xE
   352  00000F                     	ds	2
   353  000011                     ?_pad:
   354                           	opt callstack 0
   355  000011                     ___aodiv@counter:
   356                           	opt callstack 0
   357  000011                     ___aomod@counter:
   358                           	opt callstack 0
   359  000011                     pad@fp:
   360                           	opt callstack 0
   361                           
   362                           ; 2 bytes @ 0x10
   363  000011                     	ds	1
   364  000012                     ___aodiv@sign:
   365                           	opt callstack 0
   366  000012                     ___aomod@sign:
   367                           	opt callstack 0
   368                           
   369                           ; 1 bytes @ 0x11
   370  000012                     	ds	1
   371  000013                     ?_abs:
   372                           	opt callstack 0
   373  000013                     pad@buf:
   374                           	opt callstack 0
   375  000013                     abs@a:
   376                           	opt callstack 0
   377  000013                     ___aodiv@quotient:
   378                           	opt callstack 0
   379                           
   380                           ; 8 bytes @ 0x12
   381  000013                     	ds	2
   382  000015                     ??_abs:
   383  000015                     pad@p:
   384                           	opt callstack 0
   385                           
   386                           ; 2 bytes @ 0x14
   387  000015                     	ds	2
   388  000017                     ??_pad:
   389                           
   390                           ; 1 bytes @ 0x16
   391  000017                     	ds	1
   392  000018                     pad@i:
   393                           	opt callstack 0
   394                           
   395                           ; 2 bytes @ 0x17
   396  000018                     	ds	2
   397  00001A                     pad@w:
   398                           	opt callstack 0
   399                           
   400                           ; 2 bytes @ 0x19
   401  00001A                     	ds	2
   402  00001C                     ?_dtoa:
   403                           	opt callstack 0
   404  00001C                     dtoa@fp:
   405                           	opt callstack 0
   406                           
   407                           ; 2 bytes @ 0x1B
   408  00001C                     	ds	2
   409  00001E                     dtoa@d:
   410                           	opt callstack 0
   411                           
   412                           ; 8 bytes @ 0x1D
   413  00001E                     	ds	8
   414  000026                     ??_dtoa:
   415                           
   416                           ; 1 bytes @ 0x25
   417  000026                     	ds	8
   418  00002E                     _dtoa$232:
   419                           	opt callstack 0
   420                           
   421                           ; 2 bytes @ 0x2D
   422  00002E                     	ds	2
   423  000030                     dtoa@p:
   424                           	opt callstack 0
   425                           
   426                           ; 2 bytes @ 0x2F
   427  000030                     	ds	2
   428  000032                     dtoa@w:
   429                           	opt callstack 0
   430                           
   431                           ; 2 bytes @ 0x31
   432  000032                     	ds	2
   433  000034                     dtoa@s:
   434                           	opt callstack 0
   435                           
   436                           ; 2 bytes @ 0x33
   437  000034                     	ds	2
   438  000036                     dtoa@n:
   439                           	opt callstack 0
   440                           
   441                           ; 8 bytes @ 0x35
   442  000036                     	ds	8
   443  00003E                     dtoa@i:
   444                           	opt callstack 0
   445                           
   446                           ; 2 bytes @ 0x3D
   447  00003E                     	ds	2
   448  000040                     ?_vfpfcnvrt:
   449                           	opt callstack 0
   450  000040                     vfpfcnvrt@fp:
   451                           	opt callstack 0
   452                           
   453                           ; 2 bytes @ 0x3F
   454  000040                     	ds	2
   455  000042                     vfpfcnvrt@fmt:
   456                           	opt callstack 0
   457                           
   458                           ; 2 bytes @ 0x41
   459  000042                     	ds	2
   460  000044                     vfpfcnvrt@ap:
   461                           	opt callstack 0
   462                           
   463                           ; 2 bytes @ 0x43
   464  000044                     	ds	2
   465  000046                     ??_vfpfcnvrt:
   466                           
   467                           ; 1 bytes @ 0x45
   468  000046                     	ds	2
   469  000048                     vfpfcnvrt@ll:
   470                           	opt callstack 0
   471                           
   472                           ; 8 bytes @ 0x47
   473  000048                     	ds	8
   474  000050                     ?_vfprintf:
   475                           	opt callstack 0
   476  000050                     vfprintf@fp:
   477                           	opt callstack 0
   478                           
   479                           ; 2 bytes @ 0x4F
   480  000050                     	ds	2
   481  000052                     vfprintf@fmt:
   482                           	opt callstack 0
   483                           
   484                           ; 2 bytes @ 0x51
   485  000052                     	ds	2
   486  000054                     vfprintf@ap:
   487                           	opt callstack 0
   488                           
   489                           ; 2 bytes @ 0x53
   490  000054                     	ds	2
   491  000056                     vfprintf@cfmt:
   492                           	opt callstack 0
   493                           
   494                           ; 2 bytes @ 0x55
   495  000056                     	ds	2
   496  000058                     ?_sprintf:
   497                           	opt callstack 0
   498  000058                     sprintf@s:
   499                           	opt callstack 0
   500                           
   501                           ; 2 bytes @ 0x57
   502  000058                     	ds	2
   503  00005A                     sprintf@fmt:
   504                           	opt callstack 0
   505                           
   506                           ; 2 bytes @ 0x59
   507  00005A                     	ds	4
   508  00005E                     LCD_Write_Convert_String@numero:
   509                           	opt callstack 0
   510                           
   511                           ; 2 bytes @ 0x5D
   512  00005E                     	ds	2
   513  000060                     
   514                           ; 1 bytes @ 0x5F
   515 ;;
   516 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   517 ;;
   518 ;; *************** function _main *****************
   519 ;; Defined at:
   520 ;;		line 99 in file "main.c"
   521 ;; Parameters:    Size  Location     Type
   522 ;;		None
   523 ;; Auto vars:     Size  Location     Type
   524 ;;		None
   525 ;; Return value:  Size  Location     Type
   526 ;;                  1    wreg      void 
   527 ;; Registers used:
   528 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   529 ;; Tracked objects:
   530 ;;		On entry : 0/0
   531 ;;		On exit  : 0/0
   532 ;;		Unchanged: 0/0
   533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   534 ;;      Params:         0       0       0       0       0       0       0       0       0
   535 ;;      Locals:         0       0       0       0       0       0       0       0       0
   536 ;;      Temps:          0       1       0       0       0       0       0       0       0
   537 ;;      Totals:         0       1       0       0       0       0       0       0       0
   538 ;;Total ram usage:        1 bytes
   539 ;; Hardware stack levels required when called:   10
   540 ;; This function calls:
   541 ;;		_I2C_Master_Init
   542 ;;		_LCD_Clear
   543 ;;		_LCD_Init
   544 ;;		_LCD_Set_Cursor
   545 ;;		_LCD_Write_String
   546 ;;		_escreve_LCD
   547 ;; This function is called by:
   548 ;;		Startup code after reset
   549 ;; This function uses a non-reentrant model
   550 ;;
   551                           
   552                           	psect	text0
   553  00133C                     __ptext0:
   554                           	opt callstack 0
   555  00133C                     _main:
   556                           	opt callstack 21
   557  00133C                     
   558                           ;main.c: 100:     minutos = 0;
   559  00133C  0E00               	movlw	0
   560  00133E  0100               	movlb	0	; () banked
   561  001340  6F6B               	movwf	(_minutos+1)& (0+255),b
   562  001342  0E00               	movlw	0
   563  001344  6F6A               	movwf	_minutos& (0+255),b
   564                           
   565                           ;main.c: 101:     segundos = 0;
   566  001346  0E00               	movlw	0
   567  001348  6F69               	movwf	(_segundos+1)& (0+255),b
   568  00134A  0E00               	movlw	0
   569  00134C  6F68               	movwf	_segundos& (0+255),b
   570  00134E                     
   571                           ; BSR set to: 0
   572                           ;main.c: 103:     I2C_Master_Init();
   573  00134E  ECF5  F00B         	call	_I2C_Master_Init	;wreg free
   574  001352                     
   575                           ;main.c: 104:     LCD_Init(0x4E);
   576  001352  0E4E               	movlw	78
   577  001354  EC47  F009         	call	_LCD_Init
   578  001358                     
   579                           ;main.c: 105:     LCD_Set_Cursor(1,1);
   580  001358  0E01               	movlw	1
   581  00135A  6E06               	movwf	LCD_Set_Cursor@COL^0,c
   582  00135C  0E01               	movlw	1
   583  00135E  EC3E  F00A         	call	_LCD_Set_Cursor
   584  001362                     l2049:
   585                           
   586                           ;main.c: 141:         segundos++;
   587  001362  0100               	movlb	0	; () banked
   588  001364  4B68               	infsnz	_segundos& (0+255),f,b
   589  001366  2B69               	incf	(_segundos+1)& (0+255),f,b
   590  001368                     
   591                           ; BSR set to: 0
   592                           ;main.c: 143:         if(segundos >= 60){
   593  001368  BF69               	btfsc	(_segundos+1)& (0+255),7,b
   594  00136A  EFC0  F009         	goto	u1301
   595  00136E  5169               	movf	(_segundos+1)& (0+255),w,b
   596  001370  E109               	bnz	u1300
   597  001372  0E3C               	movlw	60
   598  001374  5D68               	subwf	_segundos& (0+255),w,b
   599  001376  A0D8               	btfss	status,0,c
   600  001378  EFC0  F009         	goto	u1301
   601  00137C  EFC2  F009         	goto	u1300
   602  001380                     u1301:
   603  001380  EFC8  F009         	goto	l2057
   604  001384                     u1300:
   605  001384                     
   606                           ; BSR set to: 0
   607                           ;main.c: 144:             segundos = 0;
   608  001384  0E00               	movlw	0
   609  001386  6F69               	movwf	(_segundos+1)& (0+255),b
   610  001388  0E00               	movlw	0
   611  00138A  6F68               	movwf	_segundos& (0+255),b
   612  00138C                     
   613                           ; BSR set to: 0
   614                           ;main.c: 145:             minutos++;
   615  00138C  4B6A               	infsnz	_minutos& (0+255),f,b
   616  00138E  2B6B               	incf	(_minutos+1)& (0+255),f,b
   617  001390                     l2057:
   618                           
   619                           ; BSR set to: 0
   620                           ;main.c: 147:         LCD_Clear();
   621  001390  EC00  F00C         	call	_LCD_Clear	;wreg free
   622  001394                     
   623                           ;main.c: 148:         LCD_Set_Cursor(1,1);
   624  001394  0E01               	movlw	1
   625  001396  6E06               	movwf	LCD_Set_Cursor@COL^0,c
   626  001398  0E01               	movlw	1
   627  00139A  EC3E  F00A         	call	_LCD_Set_Cursor
   628  00139E                     
   629                           ;main.c: 150:         escreve_LCD(minutos);
   630  00139E  C06A  F09F         	movff	_minutos,escreve_LCD@numero
   631  0013A2  C06B  F0A0         	movff	_minutos+1,escreve_LCD@numero+1
   632  0013A6  ECEE  F009         	call	_escreve_LCD	;wreg free
   633  0013AA                     
   634                           ;main.c: 151:         LCD_Write_String(":");
   635  0013AA  0E04               	movlw	low STR_2
   636  0013AC  6E06               	movwf	LCD_Write_String@Str^0,c
   637  0013AE  0E08               	movlw	high STR_2
   638  0013B0  6E07               	movwf	(LCD_Write_String@Str+1)^0,c
   639  0013B2  ECD4  F00A         	call	_LCD_Write_String	;wreg free
   640  0013B6                     
   641                           ;main.c: 152:         escreve_LCD(segundos);
   642  0013B6  C068  F09F         	movff	_segundos,escreve_LCD@numero
   643  0013BA  C069  F0A0         	movff	_segundos+1,escreve_LCD@numero+1
   644  0013BE  ECEE  F009         	call	_escreve_LCD	;wreg free
   645  0013C2                     
   646                           ;main.c: 153:         _delay((unsigned long)((200)*(1000000/4000.0)));
   647  0013C2  0E41               	movlw	65
   648  0013C4  0100               	movlb	0	; () banked
   649  0013C6  6FA1               	movwf	??_main& (0+255),b
   650  0013C8  0EEE               	movlw	238
   651  0013CA                     u1317:
   652  0013CA  2EE8               	decfsz	wreg,f,c
   653  0013CC  D7FE               	bra	u1317
   654  0013CE  2FA1               	decfsz	??_main& (0+255),f,b
   655  0013D0  D7FC               	bra	u1317
   656  0013D2  F000               	nop	
   657  0013D4  EFB1  F009         	goto	l2049
   658  0013D8  EF00  F000         	goto	start
   659  0013DC                     __end_of_main:
   660                           	opt callstack 0
   661                           
   662 ;; *************** function _escreve_LCD *****************
   663 ;; Defined at:
   664 ;;		line 81 in file "main.c"
   665 ;; Parameters:    Size  Location     Type
   666 ;;  numero          2   14[BANK0 ] int 
   667 ;; Auto vars:     Size  Location     Type
   668 ;;		None
   669 ;; Return value:  Size  Location     Type
   670 ;;                  1    wreg      void 
   671 ;; Registers used:
   672 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   673 ;; Tracked objects:
   674 ;;		On entry : 0/0
   675 ;;		On exit  : 0/0
   676 ;;		Unchanged: 0/0
   677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   678 ;;      Params:         0       2       0       0       0       0       0       0       0
   679 ;;      Locals:         0       0       0       0       0       0       0       0       0
   680 ;;      Temps:          0       0       0       0       0       0       0       0       0
   681 ;;      Totals:         0       2       0       0       0       0       0       0       0
   682 ;;Total ram usage:        2 bytes
   683 ;; Hardware stack levels used:    1
   684 ;; Hardware stack levels required when called:    9
   685 ;; This function calls:
   686 ;;		_LCD_Write_Convert_String
   687 ;;		___awdiv
   688 ;;		___awmod
   689 ;; This function is called by:
   690 ;;		_main
   691 ;; This function uses a non-reentrant model
   692 ;;
   693                           
   694                           	psect	text1
   695  0013DC                     __ptext1:
   696                           	opt callstack 0
   697  0013DC                     _escreve_LCD:
   698                           	opt callstack 21
   699  0013DC                     
   700                           ;main.c: 83:     if(numero < 10){
   701  0013DC  0100               	movlb	0	; () banked
   702  0013DE  BFA0               	btfsc	(escreve_LCD@numero+1)& (0+255),7,b
   703  0013E0  EFFD  F009         	goto	u1270
   704  0013E4  51A0               	movf	(escreve_LCD@numero+1)& (0+255),w,b
   705  0013E6  E107               	bnz	u1271
   706  0013E8  0E0A               	movlw	10
   707  0013EA  5D9F               	subwf	escreve_LCD@numero& (0+255),w,b
   708  0013EC  B0D8               	btfsc	status,0,c
   709  0013EE  EFFB  F009         	goto	u1271
   710  0013F2  EFFD  F009         	goto	u1270
   711  0013F6                     u1271:
   712  0013F6  EF19  F00A         	goto	l1985
   713  0013FA                     u1270:
   714  0013FA                     
   715                           ; BSR set to: 0
   716                           ;main.c: 84:         LCD_Write_Convert_String(0);
   717  0013FA  0E00               	movlw	0
   718  0013FC  6E5F               	movwf	(LCD_Write_Convert_String@numero+1)^0,c
   719  0013FE  0E00               	movlw	0
   720  001400  6E5E               	movwf	LCD_Write_Convert_String@numero^0,c
   721  001402  ECA4  F00A         	call	_LCD_Write_Convert_String	;wreg free
   722  001406                     
   723                           ;main.c: 85:         dir = numero % 10;
   724  001406  C09F  F001         	movff	escreve_LCD@numero,___awmod@dividend
   725  00140A  C0A0  F002         	movff	escreve_LCD@numero+1,___awmod@dividend+1
   726  00140E  0E00               	movlw	0
   727  001410  6E04               	movwf	(___awmod@divisor+1)^0,c
   728  001412  0E0A               	movlw	10
   729  001414  6E03               	movwf	___awmod@divisor^0,c
   730  001416  ECEF  F008         	call	___awmod	;wreg free
   731  00141A  C001  F06C         	movff	?___awmod,_dir
   732  00141E  C002  F06D         	movff	?___awmod+1,_dir+1
   733  001422                     l1983:
   734                           
   735                           ;main.c: 86:         LCD_Write_Convert_String(dir);
   736  001422  C06C  F05E         	movff	_dir,LCD_Write_Convert_String@numero
   737  001426  C06D  F05F         	movff	_dir+1,LCD_Write_Convert_String@numero+1
   738  00142A  ECA4  F00A         	call	_LCD_Write_Convert_String	;wreg free
   739                           
   740                           ;main.c: 87:     }
   741  00142E  EF3D  F00A         	goto	l161
   742  001432                     l1985:
   743                           
   744                           ; BSR set to: 0
   745                           ;main.c: 90:         esq = numero / 10;
   746  001432  C09F  F001         	movff	escreve_LCD@numero,___awdiv@dividend
   747  001436  C0A0  F002         	movff	escreve_LCD@numero+1,___awdiv@dividend+1
   748  00143A  0E00               	movlw	0
   749  00143C  6E04               	movwf	(___awdiv@divisor+1)^0,c
   750  00143E  0E0A               	movlw	10
   751  001440  6E03               	movwf	___awdiv@divisor^0,c
   752  001442  EC8D  F008         	call	___awdiv	;wreg free
   753  001446  C001  F06E         	movff	?___awdiv,_esq
   754  00144A  C002  F06F         	movff	?___awdiv+1,_esq+1
   755                           
   756                           ;main.c: 91:         dir = numero % 10;
   757  00144E  C09F  F001         	movff	escreve_LCD@numero,___awmod@dividend
   758  001452  C0A0  F002         	movff	escreve_LCD@numero+1,___awmod@dividend+1
   759  001456  0E00               	movlw	0
   760  001458  6E04               	movwf	(___awmod@divisor+1)^0,c
   761  00145A  0E0A               	movlw	10
   762  00145C  6E03               	movwf	___awmod@divisor^0,c
   763  00145E  ECEF  F008         	call	___awmod	;wreg free
   764  001462  C001  F06C         	movff	?___awmod,_dir
   765  001466  C002  F06D         	movff	?___awmod+1,_dir+1
   766  00146A                     
   767                           ;main.c: 93:         LCD_Write_Convert_String(esq);
   768  00146A  C06E  F05E         	movff	_esq,LCD_Write_Convert_String@numero
   769  00146E  C06F  F05F         	movff	_esq+1,LCD_Write_Convert_String@numero+1
   770  001472  ECA4  F00A         	call	_LCD_Write_Convert_String	;wreg free
   771  001476  EF11  F00A         	goto	l1983
   772  00147A                     l161:
   773  00147A  0012               	return		;funcret
   774  00147C                     __end_of_escreve_LCD:
   775                           	opt callstack 0
   776                           
   777 ;; *************** function ___awmod *****************
   778 ;; Defined at:
   779 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awmod.c"
   780 ;; Parameters:    Size  Location     Type
   781 ;;  dividend        2    0[COMRAM] int 
   782 ;;  divisor         2    2[COMRAM] int 
   783 ;; Auto vars:     Size  Location     Type
   784 ;;  sign            1    5[COMRAM] unsigned char 
   785 ;;  counter         1    4[COMRAM] unsigned char 
   786 ;; Return value:  Size  Location     Type
   787 ;;                  2    0[COMRAM] int 
   788 ;; Registers used:
   789 ;;		wreg, status,2, status,0
   790 ;; Tracked objects:
   791 ;;		On entry : 0/0
   792 ;;		On exit  : 0/0
   793 ;;		Unchanged: 0/0
   794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   795 ;;      Params:         4       0       0       0       0       0       0       0       0
   796 ;;      Locals:         2       0       0       0       0       0       0       0       0
   797 ;;      Temps:          0       0       0       0       0       0       0       0       0
   798 ;;      Totals:         6       0       0       0       0       0       0       0       0
   799 ;;Total ram usage:        6 bytes
   800 ;; Hardware stack levels used:    1
   801 ;; This function calls:
   802 ;;		Nothing
   803 ;; This function is called by:
   804 ;;		_escreve_LCD
   805 ;;		_LCD_Write_Int
   806 ;; This function uses a non-reentrant model
   807 ;;
   808                           
   809                           	psect	text2
   810  0011DE                     __ptext2:
   811                           	opt callstack 0
   812  0011DE                     ___awmod:
   813                           	opt callstack 29
   814  0011DE  0E00               	movlw	0
   815  0011E0  6E06               	movwf	___awmod@sign^0,c
   816  0011E2  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
   817  0011E4  EFF8  F008         	goto	u1200
   818  0011E8  EFF6  F008         	goto	u1201
   819  0011EC                     u1201:
   820  0011EC  EFFE  F008         	goto	l1889
   821  0011F0                     u1200:
   822  0011F0  6C01               	negf	___awmod@dividend^0,c
   823  0011F2  1E02               	comf	(___awmod@dividend+1)^0,f,c
   824  0011F4  B0D8               	btfsc	status,0,c
   825  0011F6  2A02               	incf	(___awmod@dividend+1)^0,f,c
   826  0011F8  0E01               	movlw	1
   827  0011FA  6E06               	movwf	___awmod@sign^0,c
   828  0011FC                     l1889:
   829  0011FC  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
   830  0011FE  EF05  F009         	goto	u1210
   831  001202  EF03  F009         	goto	u1211
   832  001206                     u1211:
   833  001206  EF09  F009         	goto	l1893
   834  00120A                     u1210:
   835  00120A  6C03               	negf	___awmod@divisor^0,c
   836  00120C  1E04               	comf	(___awmod@divisor+1)^0,f,c
   837  00120E  B0D8               	btfsc	status,0,c
   838  001210  2A04               	incf	(___awmod@divisor+1)^0,f,c
   839  001212                     l1893:
   840  001212  5003               	movf	___awmod@divisor^0,w,c
   841  001214  1004               	iorwf	(___awmod@divisor+1)^0,w,c
   842  001216  B4D8               	btfsc	status,2,c
   843  001218  EF10  F009         	goto	u1221
   844  00121C  EF12  F009         	goto	u1220
   845  001220                     u1221:
   846  001220  EF36  F009         	goto	l1909
   847  001224                     u1220:
   848  001224  0E01               	movlw	1
   849  001226  6E05               	movwf	___awmod@counter^0,c
   850  001228  EF1A  F009         	goto	l1899
   851  00122C                     l1897:
   852  00122C  90D8               	bcf	status,0,c
   853  00122E  3603               	rlcf	___awmod@divisor^0,f,c
   854  001230  3604               	rlcf	(___awmod@divisor+1)^0,f,c
   855  001232  2A05               	incf	___awmod@counter^0,f,c
   856  001234                     l1899:
   857  001234  AE04               	btfss	(___awmod@divisor+1)^0,7,c
   858  001236  EF1F  F009         	goto	u1231
   859  00123A  EF21  F009         	goto	u1230
   860  00123E                     u1231:
   861  00123E  EF16  F009         	goto	l1897
   862  001242                     u1230:
   863  001242                     l1901:
   864  001242  5003               	movf	___awmod@divisor^0,w,c
   865  001244  5C01               	subwf	___awmod@dividend^0,w,c
   866  001246  5004               	movf	(___awmod@divisor+1)^0,w,c
   867  001248  5802               	subwfb	(___awmod@dividend+1)^0,w,c
   868  00124A  A0D8               	btfss	status,0,c
   869  00124C  EF2A  F009         	goto	u1241
   870  001250  EF2C  F009         	goto	u1240
   871  001254                     u1241:
   872  001254  EF30  F009         	goto	l1905
   873  001258                     u1240:
   874  001258  5003               	movf	___awmod@divisor^0,w,c
   875  00125A  5E01               	subwf	___awmod@dividend^0,f,c
   876  00125C  5004               	movf	(___awmod@divisor+1)^0,w,c
   877  00125E  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
   878  001260                     l1905:
   879  001260  90D8               	bcf	status,0,c
   880  001262  3204               	rrcf	(___awmod@divisor+1)^0,f,c
   881  001264  3203               	rrcf	___awmod@divisor^0,f,c
   882  001266  2E05               	decfsz	___awmod@counter^0,f,c
   883  001268  EF21  F009         	goto	l1901
   884  00126C                     l1909:
   885  00126C  5006               	movf	___awmod@sign^0,w,c
   886  00126E  B4D8               	btfsc	status,2,c
   887  001270  EF3C  F009         	goto	u1251
   888  001274  EF3E  F009         	goto	u1250
   889  001278                     u1251:
   890  001278  EF42  F009         	goto	l1913
   891  00127C                     u1250:
   892  00127C  6C01               	negf	___awmod@dividend^0,c
   893  00127E  1E02               	comf	(___awmod@dividend+1)^0,f,c
   894  001280  B0D8               	btfsc	status,0,c
   895  001282  2A02               	incf	(___awmod@dividend+1)^0,f,c
   896  001284                     l1913:
   897  001284  C001  F001         	movff	___awmod@dividend,?___awmod
   898  001288  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
   899  00128C  0012               	return		;funcret
   900  00128E                     __end_of___awmod:
   901                           	opt callstack 0
   902                           
   903 ;; *************** function ___awdiv *****************
   904 ;; Defined at:
   905 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awdiv.c"
   906 ;; Parameters:    Size  Location     Type
   907 ;;  dividend        2    0[COMRAM] int 
   908 ;;  divisor         2    2[COMRAM] int 
   909 ;; Auto vars:     Size  Location     Type
   910 ;;  quotient        2    6[COMRAM] int 
   911 ;;  sign            1    5[COMRAM] unsigned char 
   912 ;;  counter         1    4[COMRAM] unsigned char 
   913 ;; Return value:  Size  Location     Type
   914 ;;                  2    0[COMRAM] int 
   915 ;; Registers used:
   916 ;;		wreg, status,2, status,0
   917 ;; Tracked objects:
   918 ;;		On entry : 0/0
   919 ;;		On exit  : 0/0
   920 ;;		Unchanged: 0/0
   921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   922 ;;      Params:         4       0       0       0       0       0       0       0       0
   923 ;;      Locals:         4       0       0       0       0       0       0       0       0
   924 ;;      Temps:          0       0       0       0       0       0       0       0       0
   925 ;;      Totals:         8       0       0       0       0       0       0       0       0
   926 ;;Total ram usage:        8 bytes
   927 ;; Hardware stack levels used:    1
   928 ;; This function calls:
   929 ;;		Nothing
   930 ;; This function is called by:
   931 ;;		_escreve_LCD
   932 ;;		_LCD_Write_Int
   933 ;; This function uses a non-reentrant model
   934 ;;
   935                           
   936                           	psect	text3
   937  00111A                     __ptext3:
   938                           	opt callstack 0
   939  00111A                     ___awdiv:
   940                           	opt callstack 29
   941  00111A  0E00               	movlw	0
   942  00111C  6E06               	movwf	___awdiv@sign^0,c
   943  00111E  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
   944  001120  EF96  F008         	goto	u1140
   945  001124  EF94  F008         	goto	u1141
   946  001128                     u1141:
   947  001128  EF9C  F008         	goto	l1845
   948  00112C                     u1140:
   949  00112C  6C03               	negf	___awdiv@divisor^0,c
   950  00112E  1E04               	comf	(___awdiv@divisor+1)^0,f,c
   951  001130  B0D8               	btfsc	status,0,c
   952  001132  2A04               	incf	(___awdiv@divisor+1)^0,f,c
   953  001134  0E01               	movlw	1
   954  001136  6E06               	movwf	___awdiv@sign^0,c
   955  001138                     l1845:
   956  001138  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
   957  00113A  EFA3  F008         	goto	u1150
   958  00113E  EFA1  F008         	goto	u1151
   959  001142                     u1151:
   960  001142  EFA9  F008         	goto	l1851
   961  001146                     u1150:
   962  001146  6C01               	negf	___awdiv@dividend^0,c
   963  001148  1E02               	comf	(___awdiv@dividend+1)^0,f,c
   964  00114A  B0D8               	btfsc	status,0,c
   965  00114C  2A02               	incf	(___awdiv@dividend+1)^0,f,c
   966  00114E  0E01               	movlw	1
   967  001150  1A06               	xorwf	___awdiv@sign^0,f,c
   968  001152                     l1851:
   969  001152  0E00               	movlw	0
   970  001154  6E08               	movwf	(___awdiv@quotient+1)^0,c
   971  001156  0E00               	movlw	0
   972  001158  6E07               	movwf	___awdiv@quotient^0,c
   973  00115A  5003               	movf	___awdiv@divisor^0,w,c
   974  00115C  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
   975  00115E  B4D8               	btfsc	status,2,c
   976  001160  EFB4  F008         	goto	u1161
   977  001164  EFB6  F008         	goto	u1160
   978  001168                     u1161:
   979  001168  EFDE  F008         	goto	l1873
   980  00116C                     u1160:
   981  00116C  0E01               	movlw	1
   982  00116E  6E05               	movwf	___awdiv@counter^0,c
   983  001170  EFBE  F008         	goto	l1859
   984  001174                     l1857:
   985  001174  90D8               	bcf	status,0,c
   986  001176  3603               	rlcf	___awdiv@divisor^0,f,c
   987  001178  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
   988  00117A  2A05               	incf	___awdiv@counter^0,f,c
   989  00117C                     l1859:
   990  00117C  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
   991  00117E  EFC3  F008         	goto	u1171
   992  001182  EFC5  F008         	goto	u1170
   993  001186                     u1171:
   994  001186  EFBA  F008         	goto	l1857
   995  00118A                     u1170:
   996  00118A                     l1861:
   997  00118A  90D8               	bcf	status,0,c
   998  00118C  3607               	rlcf	___awdiv@quotient^0,f,c
   999  00118E  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  1000  001190  5003               	movf	___awdiv@divisor^0,w,c
  1001  001192  5C01               	subwf	___awdiv@dividend^0,w,c
  1002  001194  5004               	movf	(___awdiv@divisor+1)^0,w,c
  1003  001196  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  1004  001198  A0D8               	btfss	status,0,c
  1005  00119A  EFD1  F008         	goto	u1181
  1006  00119E  EFD3  F008         	goto	u1180
  1007  0011A2                     u1181:
  1008  0011A2  EFD8  F008         	goto	l1869
  1009  0011A6                     u1180:
  1010  0011A6  5003               	movf	___awdiv@divisor^0,w,c
  1011  0011A8  5E01               	subwf	___awdiv@dividend^0,f,c
  1012  0011AA  5004               	movf	(___awdiv@divisor+1)^0,w,c
  1013  0011AC  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  1014  0011AE  8007               	bsf	___awdiv@quotient^0,0,c
  1015  0011B0                     l1869:
  1016  0011B0  90D8               	bcf	status,0,c
  1017  0011B2  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  1018  0011B4  3203               	rrcf	___awdiv@divisor^0,f,c
  1019  0011B6  2E05               	decfsz	___awdiv@counter^0,f,c
  1020  0011B8  EFC5  F008         	goto	l1861
  1021  0011BC                     l1873:
  1022  0011BC  5006               	movf	___awdiv@sign^0,w,c
  1023  0011BE  B4D8               	btfsc	status,2,c
  1024  0011C0  EFE4  F008         	goto	u1191
  1025  0011C4  EFE6  F008         	goto	u1190
  1026  0011C8                     u1191:
  1027  0011C8  EFEA  F008         	goto	l1877
  1028  0011CC                     u1190:
  1029  0011CC  6C07               	negf	___awdiv@quotient^0,c
  1030  0011CE  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  1031  0011D0  B0D8               	btfsc	status,0,c
  1032  0011D2  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  1033  0011D4                     l1877:
  1034  0011D4  C007  F001         	movff	___awdiv@quotient,?___awdiv
  1035  0011D8  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  1036  0011DC  0012               	return		;funcret
  1037  0011DE                     __end_of___awdiv:
  1038                           	opt callstack 0
  1039                           
  1040 ;; *************** function _LCD_Write_Convert_String *****************
  1041 ;; Defined at:
  1042 ;;		line 170 in file "lcdi2c.c"
  1043 ;; Parameters:    Size  Location     Type
  1044 ;;  numero          2   93[COMRAM] int 
  1045 ;; Auto vars:     Size  Location     Type
  1046 ;;  i               2   12[BANK0 ] int 
  1047 ;;  text            2   10[BANK0 ] unsigned char [2]
  1048 ;; Return value:  Size  Location     Type
  1049 ;;                  1    wreg      void 
  1050 ;; Registers used:
  1051 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1052 ;; Tracked objects:
  1053 ;;		On entry : 0/0
  1054 ;;		On exit  : 0/0
  1055 ;;		Unchanged: 0/0
  1056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1057 ;;      Params:         2       0       0       0       0       0       0       0       0
  1058 ;;      Locals:         0       4       0       0       0       0       0       0       0
  1059 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1060 ;;      Totals:         2       4       0       0       0       0       0       0       0
  1061 ;;Total ram usage:        6 bytes
  1062 ;; Hardware stack levels used:    1
  1063 ;; Hardware stack levels required when called:    8
  1064 ;; This function calls:
  1065 ;;		_LCD_Write_Char
  1066 ;;		_sprintf
  1067 ;; This function is called by:
  1068 ;;		_escreve_LCD
  1069 ;; This function uses a non-reentrant model
  1070 ;;
  1071                           
  1072                           	psect	text4
  1073  001548                     __ptext4:
  1074                           	opt callstack 0
  1075  001548                     _LCD_Write_Convert_String:
  1076                           	opt callstack 21
  1077  001548                     
  1078                           ;lcdi2c.c: 170: void LCD_Write_Convert_String(int numero);lcdi2c.c: 171: {;lcdi2c.c: 172
      +                          :   char text[2];;lcdi2c.c: 173:   sprintf(text, "%d", numero);
  1079  001548  0E9B               	movlw	low LCD_Write_Convert_String@text
  1080  00154A  6E58               	movwf	sprintf@s^0,c
  1081  00154C  0E00               	movlw	high LCD_Write_Convert_String@text
  1082  00154E  6E59               	movwf	(sprintf@s+1)^0,c
  1083  001550  0E01               	movlw	low STR_1
  1084  001552  6E5A               	movwf	sprintf@fmt^0,c
  1085  001554  0E08               	movlw	high STR_1
  1086  001556  6E5B               	movwf	(sprintf@fmt+1)^0,c
  1087  001558  C05E  F05C         	movff	LCD_Write_Convert_String@numero,?_sprintf+4
  1088  00155C  C05F  F05D         	movff	LCD_Write_Convert_String@numero+1,?_sprintf+5
  1089  001560  ECFF  F00A         	call	_sprintf	;wreg free
  1090  001564                     
  1091                           ;lcdi2c.c: 175:   for(int i=0; text[i]!='\0'; i++)
  1092  001564  0E00               	movlw	0
  1093  001566  0100               	movlb	0	; () banked
  1094  001568  6F9E               	movwf	(LCD_Write_Convert_String@i+1)& (0+255),b
  1095  00156A  0E00               	movlw	0
  1096  00156C  6F9D               	movwf	LCD_Write_Convert_String@i& (0+255),b
  1097  00156E  EFC5  F00A         	goto	l1835
  1098  001572                     l1831:
  1099                           
  1100                           ; BSR set to: 0
  1101                           ;lcdi2c.c: 176:     LCD_Write_Char(text[i]);
  1102  001572  0E9B               	movlw	low LCD_Write_Convert_String@text
  1103  001574  259D               	addwf	LCD_Write_Convert_String@i& (0+255),w,b
  1104  001576  6ED9               	movwf	fsr2l,c
  1105  001578  0E00               	movlw	high LCD_Write_Convert_String@text
  1106  00157A  219E               	addwfc	(LCD_Write_Convert_String@i+1)& (0+255),w,b
  1107  00157C  6EDA               	movwf	fsr2h,c
  1108  00157E  50DF               	movf	indf2,w,c
  1109  001580  ECCB  F00B         	call	_LCD_Write_Char
  1110  001584  0100               	movlb	0	; () banked
  1111  001586  4B9D               	infsnz	LCD_Write_Convert_String@i& (0+255),f,b
  1112  001588  2B9E               	incf	(LCD_Write_Convert_String@i+1)& (0+255),f,b
  1113  00158A                     l1835:
  1114                           
  1115                           ; BSR set to: 0
  1116  00158A  0E9B               	movlw	low LCD_Write_Convert_String@text
  1117  00158C  259D               	addwf	LCD_Write_Convert_String@i& (0+255),w,b
  1118  00158E  6ED9               	movwf	fsr2l,c
  1119  001590  0E00               	movlw	high LCD_Write_Convert_String@text
  1120  001592  219E               	addwfc	(LCD_Write_Convert_String@i+1)& (0+255),w,b
  1121  001594  6EDA               	movwf	fsr2h,c
  1122  001596  50DF               	movf	indf2,w,c
  1123  001598  A4D8               	btfss	status,2,c
  1124  00159A  EFD1  F00A         	goto	u1131
  1125  00159E  EFD3  F00A         	goto	u1130
  1126  0015A2                     u1131:
  1127  0015A2  EFB9  F00A         	goto	l1831
  1128  0015A6                     u1130:
  1129  0015A6                     
  1130                           ; BSR set to: 0
  1131  0015A6  0012               	return		;funcret
  1132  0015A8                     __end_of_LCD_Write_Convert_String:
  1133                           	opt callstack 0
  1134                           
  1135 ;; *************** function _sprintf *****************
  1136 ;; Defined at:
  1137 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_sprintf.c"
  1138 ;; Parameters:    Size  Location     Type
  1139 ;;  s               2   87[COMRAM] PTR unsigned char 
  1140 ;;		 -> LCD_Write_Convert_String@text(2), 
  1141 ;;  fmt             2   89[COMRAM] PTR const unsigned char 
  1142 ;;		 -> STR_1(3), 
  1143 ;; Auto vars:     Size  Location     Type
  1144 ;;  f               6    4[BANK0 ] struct _IO_FILE
  1145 ;;  ap              2    2[BANK0 ] PTR void [1]
  1146 ;;		 -> ?_sprintf(2), 
  1147 ;;  ret             2    0        int 
  1148 ;; Return value:  Size  Location     Type
  1149 ;;                  2   87[COMRAM] int 
  1150 ;; Registers used:
  1151 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1152 ;; Tracked objects:
  1153 ;;		On entry : 0/0
  1154 ;;		On exit  : 0/0
  1155 ;;		Unchanged: 0/0
  1156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1157 ;;      Params:         6       0       0       0       0       0       0       0       0
  1158 ;;      Locals:         0      10       0       0       0       0       0       0       0
  1159 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1160 ;;      Totals:         6      10       0       0       0       0       0       0       0
  1161 ;;Total ram usage:       16 bytes
  1162 ;; Hardware stack levels used:    1
  1163 ;; Hardware stack levels required when called:    7
  1164 ;; This function calls:
  1165 ;;		_vfprintf
  1166 ;; This function is called by:
  1167 ;;		_LCD_Write_Convert_String
  1168 ;; This function uses a non-reentrant model
  1169 ;;
  1170                           
  1171                           	psect	text5
  1172  0015FE                     __ptext5:
  1173                           	opt callstack 0
  1174  0015FE                     _sprintf:
  1175                           	opt callstack 21
  1176  0015FE  0E5C               	movlw	low (?_sprintf+4)
  1177  001600  0100               	movlb	0	; () banked
  1178  001602  6F93               	movwf	sprintf@ap& (0+255),b
  1179  001604  0E00               	movlw	high (?_sprintf+4)
  1180  001606  6F94               	movwf	(sprintf@ap+1)& (0+255),b
  1181  001608  C058  F095         	movff	sprintf@s,sprintf@f
  1182  00160C  C059  F096         	movff	sprintf@s+1,sprintf@f+1
  1183  001610                     
  1184                           ; BSR set to: 0
  1185  001610  0E00               	movlw	0
  1186  001612  6F98               	movwf	(sprintf@f+3)& (0+255),b
  1187  001614  0E00               	movlw	0
  1188  001616  6F97               	movwf	(sprintf@f+2)& (0+255),b
  1189  001618                     
  1190                           ; BSR set to: 0
  1191  001618  0E00               	movlw	0
  1192  00161A  6F9A               	movwf	(sprintf@f+5)& (0+255),b
  1193  00161C  0E00               	movlw	0
  1194  00161E  6F99               	movwf	(sprintf@f+4)& (0+255),b
  1195  001620                     
  1196                           ; BSR set to: 0
  1197  001620  0E95               	movlw	low sprintf@f
  1198  001622  6E50               	movwf	vfprintf@fp^0,c
  1199  001624  0E00               	movlw	high sprintf@f
  1200  001626  6E51               	movwf	(vfprintf@fp+1)^0,c
  1201  001628  C05A  F052         	movff	sprintf@fmt,vfprintf@fmt
  1202  00162C  C05B  F053         	movff	sprintf@fmt+1,vfprintf@fmt+1
  1203  001630  0E93               	movlw	low sprintf@ap
  1204  001632  6E54               	movwf	vfprintf@ap^0,c
  1205  001634  0E00               	movlw	high sprintf@ap
  1206  001636  6E55               	movwf	(vfprintf@ap+1)^0,c
  1207  001638  EC73  F00A         	call	_vfprintf	;wreg free
  1208  00163C  0100               	movlb	0	; () banked
  1209  00163E  5197               	movf	(sprintf@f+2)& (0+255),w,b
  1210  001640  2458               	addwf	sprintf@s^0,w,c
  1211  001642  6ED9               	movwf	fsr2l,c
  1212  001644  5198               	movf	(sprintf@f+3)& (0+255),w,b
  1213  001646  2059               	addwfc	(sprintf@s+1)^0,w,c
  1214  001648  6EDA               	movwf	fsr2h,c
  1215  00164A  0E00               	movlw	0
  1216  00164C  6EDF               	movwf	indf2,c
  1217  00164E                     
  1218                           ; BSR set to: 0
  1219  00164E  0012               	return		;funcret
  1220  001650                     __end_of_sprintf:
  1221                           	opt callstack 0
  1222                           
  1223 ;; *************** function _vfprintf *****************
  1224 ;; Defined at:
  1225 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  1226 ;; Parameters:    Size  Location     Type
  1227 ;;  fp              2   79[COMRAM] PTR struct _IO_FILE
  1228 ;;		 -> sprintf@f(6), 
  1229 ;;  fmt             2   81[COMRAM] PTR const unsigned char 
  1230 ;;		 -> STR_1(3), 
  1231 ;;  ap              2   83[COMRAM] PTR PTR void 
  1232 ;;		 -> sprintf@ap(2), 
  1233 ;; Auto vars:     Size  Location     Type
  1234 ;;  cfmt            2   85[COMRAM] PTR unsigned char 
  1235 ;;		 -> STR_1(3), 
  1236 ;; Return value:  Size  Location     Type
  1237 ;;                  2   79[COMRAM] int 
  1238 ;; Registers used:
  1239 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1240 ;; Tracked objects:
  1241 ;;		On entry : 0/0
  1242 ;;		On exit  : 0/0
  1243 ;;		Unchanged: 0/0
  1244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1245 ;;      Params:         6       0       0       0       0       0       0       0       0
  1246 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1247 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1248 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1249 ;;Total ram usage:        8 bytes
  1250 ;; Hardware stack levels used:    1
  1251 ;; Hardware stack levels required when called:    6
  1252 ;; This function calls:
  1253 ;;		_vfpfcnvrt
  1254 ;; This function is called by:
  1255 ;;		_sprintf
  1256 ;; This function uses a non-reentrant model
  1257 ;;
  1258                           
  1259                           	psect	text6
  1260  0014E6                     __ptext6:
  1261                           	opt callstack 0
  1262  0014E6                     _vfprintf:
  1263                           	opt callstack 21
  1264  0014E6                     
  1265                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.1
      +                          0\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.10\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  1266  0014E6  C052  F056         	movff	vfprintf@fmt,vfprintf@cfmt
  1267  0014EA  C053  F057         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1268  0014EE                     
  1269                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  1270  0014EE  0E00               	movlw	0
  1271  0014F0  0100               	movlb	0	; () banked
  1272  0014F2  6F61               	movwf	(_nout+1)& (0+255),b
  1273  0014F4  0E00               	movlw	0
  1274  0014F6  6F60               	movwf	_nout& (0+255),b
  1275                           
  1276                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1277  0014F8  EF91  F00A         	goto	l1801
  1278  0014FC                     l1799:
  1279                           
  1280                           ; BSR set to: 0
  1281                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  1282  0014FC  C050  F040         	movff	vfprintf@fp,vfpfcnvrt@fp
  1283  001500  C051  F041         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1284  001504  0E56               	movlw	low vfprintf@cfmt
  1285  001506  6E42               	movwf	vfpfcnvrt@fmt^0,c
  1286  001508  0E00               	movlw	high vfprintf@cfmt
  1287  00150A  6E43               	movwf	(vfpfcnvrt@fmt+1)^0,c
  1288  00150C  C054  F044         	movff	vfprintf@ap,vfpfcnvrt@ap
  1289  001510  C055  F045         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1290  001514  EC75  F005         	call	_vfpfcnvrt	;wreg free
  1291  001518  5040               	movf	?_vfpfcnvrt^0,w,c
  1292  00151A  0100               	movlb	0	; () banked
  1293  00151C  2760               	addwf	_nout& (0+255),f,b
  1294  00151E  5041               	movf	(?_vfpfcnvrt+1)^0,w,c
  1295  001520  2361               	addwfc	(_nout+1)& (0+255),f,b
  1296  001522                     l1801:
  1297                           
  1298                           ; BSR set to: 0
  1299                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1300  001522  C056  FFF6         	movff	vfprintf@cfmt,tblptrl
  1301  001526  C057  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1302  00152A                     	if	0	;tblptru may be non-zero
  1303  00152A                     	endif
  1304  00152A                     	if	0	;tblptru may be non-zero
  1305  00152A                     	endif
  1306  00152A  0008               	tblrd		*
  1307  00152C  50F5               	movf	tablat,w,c
  1308  00152E  0900               	iorlw	0
  1309  001530  A4D8               	btfss	status,2,c
  1310  001532  EF9D  F00A         	goto	u1121
  1311  001536  EF9F  F00A         	goto	u1120
  1312  00153A                     u1121:
  1313  00153A  EF7E  F00A         	goto	l1799
  1314  00153E                     u1120:
  1315  00153E                     
  1316                           ; BSR set to: 0
  1317                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  1318  00153E  C060  F050         	movff	_nout,?_vfprintf
  1319  001542  C061  F051         	movff	_nout+1,?_vfprintf+1
  1320  001546                     
  1321                           ; BSR set to: 0
  1322  001546  0012               	return		;funcret
  1323  001548                     __end_of_vfprintf:
  1324                           	opt callstack 0
  1325                           
  1326 ;; *************** function _vfpfcnvrt *****************
  1327 ;; Defined at:
  1328 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  1329 ;; Parameters:    Size  Location     Type
  1330 ;;  fp              2   63[COMRAM] PTR struct _IO_FILE
  1331 ;;		 -> sprintf@f(6), 
  1332 ;;  fmt             2   65[COMRAM] PTR PTR unsigned char 
  1333 ;;		 -> vfprintf@cfmt(2), 
  1334 ;;  ap              2   67[COMRAM] PTR PTR void 
  1335 ;;		 -> sprintf@ap(2), 
  1336 ;; Auto vars:     Size  Location     Type
  1337 ;;  ll              8   71[COMRAM] long long 
  1338 ;;  llu             8    0        unsigned long long 
  1339 ;;  f               4    0        unsigned long long 
  1340 ;;  vp              3    0        PTR void 
  1341 ;;  ct              3    0        unsigned char [3]
  1342 ;;  cp              3    0        PTR unsigned char 
  1343 ;;  i               2    0        int 
  1344 ;;  done            2    0        int 
  1345 ;;  c               1    0        unsigned char 
  1346 ;; Return value:  Size  Location     Type
  1347 ;;                  2   63[COMRAM] int 
  1348 ;; Registers used:
  1349 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1350 ;; Tracked objects:
  1351 ;;		On entry : 0/0
  1352 ;;		On exit  : 0/0
  1353 ;;		Unchanged: 0/0
  1354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1355 ;;      Params:         6       0       0       0       0       0       0       0       0
  1356 ;;      Locals:         8       0       0       0       0       0       0       0       0
  1357 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1358 ;;      Totals:        16       0       0       0       0       0       0       0       0
  1359 ;;Total ram usage:       16 bytes
  1360 ;; Hardware stack levels used:    1
  1361 ;; Hardware stack levels required when called:    5
  1362 ;; This function calls:
  1363 ;;		_dtoa
  1364 ;;		_fputc
  1365 ;; This function is called by:
  1366 ;;		_vfprintf
  1367 ;; This function uses a non-reentrant model
  1368 ;;
  1369                           
  1370                           	psect	text7
  1371  000AEA                     __ptext7:
  1372                           	opt callstack 0
  1373  000AEA                     _vfpfcnvrt:
  1374                           	opt callstack 21
  1375  000AEA                     
  1376                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.10\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.10\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  1377  000AEA  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1378  000AEE  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1379  000AF2  CFDE FFF6          	movff	postinc2,tblptrl
  1380  000AF6  CFDD FFF7          	movff	postdec2,tblptrh
  1381  000AFA                     	if	0	;tblptru may be non-zero
  1382  000AFA                     	endif
  1383  000AFA                     	if	0	;tblptru may be non-zero
  1384  000AFA                     	endif
  1385  000AFA  0008               	tblrd		*
  1386  000AFC  50F5               	movf	tablat,w,c
  1387  000AFE  0A25               	xorlw	37
  1388  000B00  A4D8               	btfss	status,2,c
  1389  000B02  EF85  F005         	goto	u1081
  1390  000B06  EF87  F005         	goto	u1080
  1391  000B0A                     u1081:
  1392  000B0A  EF33  F006         	goto	l1779
  1393  000B0E                     u1080:
  1394  000B0E                     
  1395                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  1396  000B0E  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1397  000B12  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1398  000B16  2ADE               	incf	postinc2,f,c
  1399  000B18  0E00               	movlw	0
  1400  000B1A  22DD               	addwfc	postdec2,f,c
  1401  000B1C                     
  1402                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  1403  000B1C  0E00               	movlw	0
  1404  000B1E  0100               	movlb	0	; () banked
  1405  000B20  6F63               	movwf	(_width+1)& (0+255),b
  1406  000B22  0E00               	movlw	0
  1407  000B24  6F62               	movwf	_width& (0+255),b
  1408  000B26  C062  F066         	movff	_width,_flags
  1409  000B2A  C063  F067         	movff	_width+1,_flags+1
  1410  000B2E                     
  1411                           ; BSR set to: 0
  1412                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  1413  000B2E  6964               	setf	_prec& (0+255),b
  1414  000B30  6965               	setf	(_prec+1)& (0+255),b
  1415  000B32                     
  1416                           ; BSR set to: 0
  1417                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  1418  000B32  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1419  000B36  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1420  000B3A  CFDE FFF6          	movff	postinc2,tblptrl
  1421  000B3E  CFDD FFF7          	movff	postdec2,tblptrh
  1422  000B42                     	if	0	;tblptru may be non-zero
  1423  000B42                     	endif
  1424  000B42                     	if	0	;tblptru may be non-zero
  1425  000B42                     	endif
  1426  000B42  0008               	tblrd		*
  1427  000B44  50F5               	movf	tablat,w,c
  1428  000B46  0A64               	xorlw	100
  1429  000B48  B4D8               	btfsc	status,2,c
  1430  000B4A  EFA9  F005         	goto	u1091
  1431  000B4E  EFAB  F005         	goto	u1090
  1432  000B52                     u1091:
  1433  000B52  EFBD  F005         	goto	l1757
  1434  000B56                     u1090:
  1435  000B56                     
  1436                           ; BSR set to: 0
  1437  000B56  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1438  000B5A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1439  000B5E  CFDE FFF6          	movff	postinc2,tblptrl
  1440  000B62  CFDD FFF7          	movff	postdec2,tblptrh
  1441  000B66                     	if	0	;tblptru may be non-zero
  1442  000B66                     	endif
  1443  000B66                     	if	0	;tblptru may be non-zero
  1444  000B66                     	endif
  1445  000B66  0008               	tblrd		*
  1446  000B68  50F5               	movf	tablat,w,c
  1447  000B6A  0A69               	xorlw	105
  1448  000B6C  A4D8               	btfss	status,2,c
  1449  000B6E  EFBB  F005         	goto	u1101
  1450  000B72  EFBD  F005         	goto	u1100
  1451  000B76                     u1101:
  1452  000B76  EFFD  F005         	goto	l1763
  1453  000B7A                     u1100:
  1454  000B7A                     l1757:
  1455                           
  1456                           ; BSR set to: 0
  1457                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
  1458  000B7A  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1459  000B7E  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1460  000B82  2ADE               	incf	postinc2,f,c
  1461  000B84  0E00               	movlw	0
  1462  000B86  22DD               	addwfc	postdec2,f,c
  1463                           
  1464                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1465  000B88  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1466  000B8C  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1467  000B90  CFDF F046          	movff	indf2,??_vfpfcnvrt
  1468  000B94  0E02               	movlw	2
  1469  000B96  26DE               	addwf	postinc2,f,c
  1470  000B98  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  1471  000B9C  0E00               	movlw	0
  1472  000B9E  22DD               	addwfc	postdec2,f,c
  1473  000BA0  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1474  000BA4  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1475  000BA8  CFDE F048          	movff	postinc2,vfpfcnvrt@ll
  1476  000BAC  CFDD F049          	movff	postdec2,vfpfcnvrt@ll+1
  1477  000BB0  0E00               	movlw	0
  1478  000BB2  BE49               	btfsc	(vfpfcnvrt@ll+1)^0,7,c
  1479  000BB4  0EFF               	movlw	-1
  1480  000BB6  6E4A               	movwf	(vfpfcnvrt@ll+2)^0,c
  1481  000BB8  6E4B               	movwf	(vfpfcnvrt@ll+3)^0,c
  1482  000BBA  6E4C               	movwf	(vfpfcnvrt@ll+4)^0,c
  1483  000BBC  6E4D               	movwf	(vfpfcnvrt@ll+5)^0,c
  1484  000BBE  6E4E               	movwf	(vfpfcnvrt@ll+6)^0,c
  1485  000BC0  6E4F               	movwf	(vfpfcnvrt@ll+7)^0,c
  1486  000BC2                     
  1487                           ; BSR set to: 0
  1488                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
  1489  000BC2  C040  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  1490  000BC6  C041  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1491  000BCA  C048  F01E         	movff	vfpfcnvrt@ll,dtoa@d
  1492  000BCE  C049  F01F         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1493  000BD2  C04A  F020         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1494  000BD6  C04B  F021         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1495  000BDA  C04C  F022         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1496  000BDE  C04D  F023         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1497  000BE2  C04E  F024         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1498  000BE6  C04F  F025         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1499  000BEA  EC04  F004         	call	_dtoa	;wreg free
  1500  000BEE  C01C  F040         	movff	?_dtoa,?_vfpfcnvrt
  1501  000BF2  C01D  F041         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1502  000BF6  EF4E  F006         	goto	l239
  1503  000BFA                     l1763:
  1504                           
  1505                           ; BSR set to: 0
  1506                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1507  000BFA  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1508  000BFE  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1509  000C02  CFDE FFF6          	movff	postinc2,tblptrl
  1510  000C06  CFDD FFF7          	movff	postdec2,tblptrh
  1511  000C0A                     	if	0	;tblptru may be non-zero
  1512  000C0A                     	endif
  1513  000C0A                     	if	0	;tblptru may be non-zero
  1514  000C0A                     	endif
  1515  000C0A  0008               	tblrd		*
  1516  000C0C  50F5               	movf	tablat,w,c
  1517  000C0E  0A25               	xorlw	37
  1518  000C10  A4D8               	btfss	status,2,c
  1519  000C12  EF0D  F006         	goto	u1111
  1520  000C16  EF0F  F006         	goto	u1110
  1521  000C1A                     u1111:
  1522  000C1A  EF26  F006         	goto	l1773
  1523  000C1E                     u1110:
  1524  000C1E                     
  1525                           ; BSR set to: 0
  1526                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1527  000C1E  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1528  000C22  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1529  000C26  2ADE               	incf	postinc2,f,c
  1530  000C28  0E00               	movlw	0
  1531  000C2A  22DD               	addwfc	postdec2,f,c
  1532  000C2C                     
  1533                           ; BSR set to: 0
  1534                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1535  000C2C  0E00               	movlw	0
  1536  000C2E  6E02               	movwf	(fputc@c+1)^0,c
  1537  000C30  0E25               	movlw	37
  1538  000C32  6E01               	movwf	fputc@c^0,c
  1539  000C34  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1540  000C38  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1541  000C3C  ECC5  F007         	call	_fputc	;wreg free
  1542  000C40                     l1769:
  1543                           
  1544                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1545  000C40  0E00               	movlw	0
  1546  000C42  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
  1547  000C44  0E01               	movlw	1
  1548  000C46  6E40               	movwf	?_vfpfcnvrt^0,c
  1549  000C48  EF4E  F006         	goto	l239
  1550  000C4C                     l1773:
  1551                           
  1552                           ; BSR set to: 0
  1553                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1554  000C4C  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1555  000C50  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1556  000C54  2ADE               	incf	postinc2,f,c
  1557  000C56  0E00               	movlw	0
  1558  000C58  22DD               	addwfc	postdec2,f,c
  1559  000C5A                     
  1560                           ; BSR set to: 0
  1561                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1562  000C5A  0E00               	movlw	0
  1563  000C5C  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
  1564  000C5E  0E00               	movlw	0
  1565  000C60  6E40               	movwf	?_vfpfcnvrt^0,c
  1566  000C62  EF4E  F006         	goto	l239
  1567  000C66                     l1779:
  1568                           
  1569                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1570  000C66  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1571  000C6A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1572  000C6E  CFDE FFF6          	movff	postinc2,tblptrl
  1573  000C72  CFDD FFF7          	movff	postdec2,tblptrh
  1574  000C76                     	if	0	;tblptru may be non-zero
  1575  000C76                     	endif
  1576  000C76                     	if	0	;tblptru may be non-zero
  1577  000C76                     	endif
  1578  000C76  0008               	tblrd		*
  1579  000C78  50F5               	movf	tablat,w,c
  1580  000C7A  6E01               	movwf	fputc@c^0,c
  1581  000C7C  6A02               	clrf	(fputc@c+1)^0,c
  1582  000C7E  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1583  000C82  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1584  000C86  ECC5  F007         	call	_fputc	;wreg free
  1585  000C8A                     
  1586                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1587  000C8A  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1588  000C8E  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1589  000C92  2ADE               	incf	postinc2,f,c
  1590  000C94  0E00               	movlw	0
  1591  000C96  22DD               	addwfc	postdec2,f,c
  1592  000C98  EF20  F006         	goto	l1769
  1593  000C9C                     l239:
  1594  000C9C  0012               	return		;funcret
  1595  000C9E                     __end_of_vfpfcnvrt:
  1596                           	opt callstack 0
  1597                           
  1598 ;; *************** function _dtoa *****************
  1599 ;; Defined at:
  1600 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  1601 ;; Parameters:    Size  Location     Type
  1602 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  1603 ;;		 -> sprintf@f(6), 
  1604 ;;  d               8   29[COMRAM] long long 
  1605 ;; Auto vars:     Size  Location     Type
  1606 ;;  n               8   53[COMRAM] long long 
  1607 ;;  i               2   61[COMRAM] int 
  1608 ;;  s               2   51[COMRAM] int 
  1609 ;;  w               2   49[COMRAM] int 
  1610 ;;  p               2   47[COMRAM] int 
  1611 ;; Return value:  Size  Location     Type
  1612 ;;                  2   27[COMRAM] int 
  1613 ;; Registers used:
  1614 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1615 ;; Tracked objects:
  1616 ;;		On entry : 0/0
  1617 ;;		On exit  : 0/0
  1618 ;;		Unchanged: 0/0
  1619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1620 ;;      Params:        10       0       0       0       0       0       0       0       0
  1621 ;;      Locals:        18       0       0       0       0       0       0       0       0
  1622 ;;      Temps:          8       0       0       0       0       0       0       0       0
  1623 ;;      Totals:        36       0       0       0       0       0       0       0       0
  1624 ;;Total ram usage:       36 bytes
  1625 ;; Hardware stack levels used:    1
  1626 ;; Hardware stack levels required when called:    4
  1627 ;; This function calls:
  1628 ;;		___aodiv
  1629 ;;		___aomod
  1630 ;;		_abs
  1631 ;;		_pad
  1632 ;; This function is called by:
  1633 ;;		_vfpfcnvrt
  1634 ;; This function uses a non-reentrant model
  1635 ;;
  1636                           
  1637                           	psect	text8
  1638  000808                     __ptext8:
  1639                           	opt callstack 0
  1640  000808                     _dtoa:
  1641                           	opt callstack 21
  1642  000808                     
  1643                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.10\pic\sources\c99\common\doprnt.c: 280:     n = d;
  1644  000808  C01E  F036         	movff	dtoa@d,dtoa@n
  1645  00080C  C01F  F037         	movff	dtoa@d+1,dtoa@n+1
  1646  000810  C020  F038         	movff	dtoa@d+2,dtoa@n+2
  1647  000814  C021  F039         	movff	dtoa@d+3,dtoa@n+3
  1648  000818  C022  F03A         	movff	dtoa@d+4,dtoa@n+4
  1649  00081C  C023  F03B         	movff	dtoa@d+5,dtoa@n+5
  1650  000820  C024  F03C         	movff	dtoa@d+6,dtoa@n+6
  1651  000824  C025  F03D         	movff	dtoa@d+7,dtoa@n+7
  1652  000828                     
  1653                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  1654  000828  BE3D               	btfsc	(dtoa@n+7)^0,7,c
  1655  00082A  EF19  F004         	goto	u931
  1656  00082E  EF1C  F004         	goto	u930
  1657  000832                     u931:
  1658  000832  0E01               	movlw	1
  1659  000834  EF1D  F004         	goto	u940
  1660  000838                     u930:
  1661  000838  0E00               	movlw	0
  1662  00083A                     u940:
  1663  00083A  6E34               	movwf	dtoa@s^0,c
  1664  00083C  6A35               	clrf	(dtoa@s+1)^0,c
  1665                           
  1666                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  1667  00083E  5034               	movf	dtoa@s^0,w,c
  1668  000840  1035               	iorwf	(dtoa@s+1)^0,w,c
  1669  000842  B4D8               	btfsc	status,2,c
  1670  000844  EF26  F004         	goto	u951
  1671  000848  EF28  F004         	goto	u950
  1672  00084C                     u951:
  1673  00084C  EF38  F004         	goto	l1687
  1674  000850                     u950:
  1675  000850                     
  1676                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  1677  000850  1E3D               	comf	(dtoa@n+7)^0,f,c
  1678  000852  1E3C               	comf	(dtoa@n+6)^0,f,c
  1679  000854  1E3B               	comf	(dtoa@n+5)^0,f,c
  1680  000856  1E3A               	comf	(dtoa@n+4)^0,f,c
  1681  000858  1E39               	comf	(dtoa@n+3)^0,f,c
  1682  00085A  1E38               	comf	(dtoa@n+2)^0,f,c
  1683  00085C  1E37               	comf	(dtoa@n+1)^0,f,c
  1684  00085E  6C36               	negf	dtoa@n^0,c
  1685  000860  0E00               	movlw	0
  1686  000862  2237               	addwfc	(dtoa@n+1)^0,f,c
  1687  000864  2238               	addwfc	(dtoa@n+2)^0,f,c
  1688  000866  2239               	addwfc	(dtoa@n+3)^0,f,c
  1689  000868  223A               	addwfc	(dtoa@n+4)^0,f,c
  1690  00086A  223B               	addwfc	(dtoa@n+5)^0,f,c
  1691  00086C  223C               	addwfc	(dtoa@n+6)^0,f,c
  1692  00086E  223D               	addwfc	(dtoa@n+7)^0,f,c
  1693  000870                     l1687:
  1694                           
  1695                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  1696  000870  0100               	movlb	0	; () banked
  1697  000872  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1698  000874  EF3E  F004         	goto	u961
  1699  000878  EF40  F004         	goto	u960
  1700  00087C                     u961:
  1701  00087C  EF41  F004         	goto	l1691
  1702  000880                     u960:
  1703  000880                     
  1704                           ; BSR set to: 0
  1705                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  1706  000880  9366               	bcf	_flags& (0+255),1,b
  1707  000882                     l1691:
  1708                           
  1709                           ; BSR set to: 0
  1710                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  1711  000882  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1712  000884  EF4E  F004         	goto	u970
  1713  000888  5165               	movf	(_prec+1)& (0+255),w,b
  1714  00088A  E106               	bnz	u971
  1715  00088C  0564               	decf	_prec& (0+255),w,b
  1716  00088E  B0D8               	btfsc	status,0,c
  1717  000890  EF4C  F004         	goto	u971
  1718  000894  EF4E  F004         	goto	u970
  1719  000898                     u971:
  1720  000898  EF54  F004         	goto	l212
  1721  00089C                     u970:
  1722  00089C                     
  1723                           ; BSR set to: 0
  1724  00089C  0E00               	movlw	0
  1725  00089E  6E31               	movwf	(dtoa@p+1)^0,c
  1726  0008A0  0E01               	movlw	1
  1727  0008A2  6E30               	movwf	dtoa@p^0,c
  1728  0008A4  EF58  F004         	goto	l214
  1729  0008A8                     l212:
  1730                           
  1731                           ; BSR set to: 0
  1732  0008A8  C064  F030         	movff	_prec,dtoa@p
  1733  0008AC  C065  F031         	movff	_prec+1,dtoa@p+1
  1734  0008B0                     l214:
  1735                           
  1736                           ; BSR set to: 0
  1737                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  1738  0008B0  C062  F032         	movff	_width,dtoa@w
  1739  0008B4  C063  F033         	movff	_width+1,dtoa@w+1
  1740  0008B8                     
  1741                           ; BSR set to: 0
  1742                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  1743  0008B8  5034               	movf	dtoa@s^0,w,c
  1744  0008BA  1035               	iorwf	(dtoa@s+1)^0,w,c
  1745  0008BC  A4D8               	btfss	status,2,c
  1746  0008BE  EF63  F004         	goto	u981
  1747  0008C2  EF65  F004         	goto	u980
  1748  0008C6                     u981:
  1749  0008C6  EF6C  F004         	goto	l1699
  1750  0008CA                     u980:
  1751  0008CA                     
  1752                           ; BSR set to: 0
  1753  0008CA  A566               	btfss	_flags& (0+255),2,b
  1754  0008CC  EF6A  F004         	goto	u991
  1755  0008D0  EF6C  F004         	goto	u990
  1756  0008D4                     u991:
  1757  0008D4  EF6F  F004         	goto	l1701
  1758  0008D8                     u990:
  1759  0008D8                     l1699:
  1760                           
  1761                           ; BSR set to: 0
  1762                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  1763  0008D8  0632               	decf	dtoa@w^0,f,c
  1764  0008DA  A0D8               	btfss	status,0,c
  1765  0008DC  0633               	decf	(dtoa@w+1)^0,f,c
  1766  0008DE                     l1701:
  1767                           
  1768                           ; BSR set to: 0
  1769                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  1770  0008DE  0E00               	movlw	0
  1771  0008E0  6E3F               	movwf	(dtoa@i+1)^0,c
  1772  0008E2  0E1F               	movlw	31
  1773  0008E4  6E3E               	movwf	dtoa@i^0,c
  1774  0008E6                     
  1775                           ; BSR set to: 0
  1776                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  1777  0008E6  0E00               	movlw	0
  1778  0008E8  6F90               	movwf	(_dbuf+31)& (0+255),b
  1779                           
  1780                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1781  0008EA  EFF3  F004         	goto	l1715
  1782  0008EE                     l1705:
  1783                           
  1784                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  1785  0008EE  063E               	decf	dtoa@i^0,f,c
  1786  0008F0  A0D8               	btfss	status,0,c
  1787  0008F2  063F               	decf	(dtoa@i+1)^0,f,c
  1788  0008F4                     
  1789                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  1790  0008F4  0E71               	movlw	low _dbuf
  1791  0008F6  243E               	addwf	dtoa@i^0,w,c
  1792  0008F8  6ED9               	movwf	fsr2l,c
  1793  0008FA  0E00               	movlw	high _dbuf
  1794  0008FC  203F               	addwfc	(dtoa@i+1)^0,w,c
  1795  0008FE  6EDA               	movwf	fsr2h,c
  1796  000900  C036  F001         	movff	dtoa@n,___aomod@dividend
  1797  000904  C037  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1798  000908  C038  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1799  00090C  C039  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1800  000910  C03A  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1801  000914  C03B  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1802  000918  C03C  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1803  00091C  C03D  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1804  000920  0E0A               	movlw	10
  1805  000922  6E09               	movwf	___aomod@divisor^0,c
  1806  000924  0E00               	movlw	0
  1807  000926  6E0A               	movwf	(___aomod@divisor+1)^0,c
  1808  000928  0E00               	movlw	0
  1809  00092A  6E0B               	movwf	(___aomod@divisor+2)^0,c
  1810  00092C  0E00               	movlw	0
  1811  00092E  6E0C               	movwf	(___aomod@divisor+3)^0,c
  1812  000930  0E00               	movlw	0
  1813  000932  6E0D               	movwf	(___aomod@divisor+4)^0,c
  1814  000934  0E00               	movlw	0
  1815  000936  6E0E               	movwf	(___aomod@divisor+5)^0,c
  1816  000938  0E00               	movlw	0
  1817  00093A  6E0F               	movwf	(___aomod@divisor+6)^0,c
  1818  00093C  0E00               	movlw	0
  1819  00093E  6E10               	movwf	(___aomod@divisor+7)^0,c
  1820  000940  EC13  F007         	call	___aomod	;wreg free
  1821  000944  C001  F026         	movff	?___aomod,??_dtoa
  1822  000948  C002  F027         	movff	?___aomod+1,??_dtoa+1
  1823  00094C  C003  F028         	movff	?___aomod+2,??_dtoa+2
  1824  000950  C004  F029         	movff	?___aomod+3,??_dtoa+3
  1825  000954  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  1826  000958  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  1827  00095C  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  1828  000960  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  1829  000964  C026  F013         	movff	??_dtoa,abs@a
  1830  000968  C028  F014         	movff	??_dtoa+2,abs@a+1
  1831  00096C  EC4A  F00B         	call	_abs	;wreg free
  1832  000970  5013               	movf	?_abs^0,w,c
  1833  000972  0F30               	addlw	48
  1834  000974  6EDF               	movwf	indf2,c
  1835  000976                     
  1836                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  1837  000976  0630               	decf	dtoa@p^0,f,c
  1838  000978  A0D8               	btfss	status,0,c
  1839  00097A  0631               	decf	(dtoa@p+1)^0,f,c
  1840  00097C                     
  1841                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  1842  00097C  0632               	decf	dtoa@w^0,f,c
  1843  00097E  A0D8               	btfss	status,0,c
  1844  000980  0633               	decf	(dtoa@w+1)^0,f,c
  1845  000982                     
  1846                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  1847  000982  C036  F001         	movff	dtoa@n,___aodiv@dividend
  1848  000986  C037  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  1849  00098A  C038  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  1850  00098E  C039  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  1851  000992  C03A  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  1852  000996  C03B  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  1853  00099A  C03C  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  1854  00099E  C03D  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  1855  0009A2  0E0A               	movlw	10
  1856  0009A4  6E09               	movwf	___aodiv@divisor^0,c
  1857  0009A6  0E00               	movlw	0
  1858  0009A8  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  1859  0009AA  0E00               	movlw	0
  1860  0009AC  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  1861  0009AE  0E00               	movlw	0
  1862  0009B0  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  1863  0009B2  0E00               	movlw	0
  1864  0009B4  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  1865  0009B6  0E00               	movlw	0
  1866  0009B8  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  1867  0009BA  0E00               	movlw	0
  1868  0009BC  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  1869  0009BE  0E00               	movlw	0
  1870  0009C0  6E10               	movwf	(___aodiv@divisor+7)^0,c
  1871  0009C2  EC4F  F006         	call	___aodiv	;wreg free
  1872  0009C6  C001  F036         	movff	?___aodiv,dtoa@n
  1873  0009CA  C002  F037         	movff	?___aodiv+1,dtoa@n+1
  1874  0009CE  C003  F038         	movff	?___aodiv+2,dtoa@n+2
  1875  0009D2  C004  F039         	movff	?___aodiv+3,dtoa@n+3
  1876  0009D6  C005  F03A         	movff	?___aodiv+4,dtoa@n+4
  1877  0009DA  C006  F03B         	movff	?___aodiv+5,dtoa@n+5
  1878  0009DE  C007  F03C         	movff	?___aodiv+6,dtoa@n+6
  1879  0009E2  C008  F03D         	movff	?___aodiv+7,dtoa@n+7
  1880  0009E6                     l1715:
  1881                           
  1882                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1883  0009E6  BE3F               	btfsc	(dtoa@i+1)^0,7,c
  1884  0009E8  EFFE  F004         	goto	u1001
  1885  0009EC  503F               	movf	(dtoa@i+1)^0,w,c
  1886  0009EE  E108               	bnz	u1000
  1887  0009F0  043E               	decf	dtoa@i^0,w,c
  1888  0009F2  A0D8               	btfss	status,0,c
  1889  0009F4  EFFE  F004         	goto	u1001
  1890  0009F8  EF00  F005         	goto	u1000
  1891  0009FC                     u1001:
  1892  0009FC  EF31  F005         	goto	l1725
  1893  000A00                     u1000:
  1894  000A00  5036               	movf	dtoa@n^0,w,c
  1895  000A02  1037               	iorwf	(dtoa@n+1)^0,w,c
  1896  000A04  1038               	iorwf	(dtoa@n+2)^0,w,c
  1897  000A06  1039               	iorwf	(dtoa@n+3)^0,w,c
  1898  000A08  103A               	iorwf	(dtoa@n+4)^0,w,c
  1899  000A0A  103B               	iorwf	(dtoa@n+5)^0,w,c
  1900  000A0C  103C               	iorwf	(dtoa@n+6)^0,w,c
  1901  000A0E  103D               	iorwf	(dtoa@n+7)^0,w,c
  1902  000A10  A4D8               	btfss	status,2,c
  1903  000A12  EF0D  F005         	goto	u1011
  1904  000A16  EF0F  F005         	goto	u1010
  1905  000A1A                     u1011:
  1906  000A1A  EF77  F004         	goto	l1705
  1907  000A1E                     u1010:
  1908  000A1E  BE31               	btfsc	(dtoa@p+1)^0,7,c
  1909  000A20  EF1C  F005         	goto	u1020
  1910  000A24  5031               	movf	(dtoa@p+1)^0,w,c
  1911  000A26  E106               	bnz	u1021
  1912  000A28  0430               	decf	dtoa@p^0,w,c
  1913  000A2A  B0D8               	btfsc	status,0,c
  1914  000A2C  EF1A  F005         	goto	u1021
  1915  000A30  EF1C  F005         	goto	u1020
  1916  000A34                     u1021:
  1917  000A34  EF77  F004         	goto	l1705
  1918  000A38                     u1020:
  1919  000A38  BE33               	btfsc	(dtoa@w+1)^0,7,c
  1920  000A3A  EF27  F005         	goto	u1031
  1921  000A3E  5033               	movf	(dtoa@w+1)^0,w,c
  1922  000A40  E108               	bnz	u1030
  1923  000A42  0432               	decf	dtoa@w^0,w,c
  1924  000A44  A0D8               	btfss	status,0,c
  1925  000A46  EF27  F005         	goto	u1031
  1926  000A4A  EF29  F005         	goto	u1030
  1927  000A4E                     u1031:
  1928  000A4E  EF31  F005         	goto	l1725
  1929  000A52                     u1030:
  1930  000A52  0100               	movlb	0	; () banked
  1931  000A54  B366               	btfsc	_flags& (0+255),1,b
  1932  000A56  EF2F  F005         	goto	u1041
  1933  000A5A  EF31  F005         	goto	u1040
  1934  000A5E                     u1041:
  1935  000A5E  EF77  F004         	goto	l1705
  1936  000A62                     u1040:
  1937  000A62                     l1725:
  1938                           
  1939                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  1940  000A62  5034               	movf	dtoa@s^0,w,c
  1941  000A64  1035               	iorwf	(dtoa@s+1)^0,w,c
  1942  000A66  A4D8               	btfss	status,2,c
  1943  000A68  EF38  F005         	goto	u1051
  1944  000A6C  EF3A  F005         	goto	u1050
  1945  000A70                     u1051:
  1946  000A70  EF42  F005         	goto	l1729
  1947  000A74                     u1050:
  1948  000A74  0100               	movlb	0	; () banked
  1949  000A76  A566               	btfss	_flags& (0+255),2,b
  1950  000A78  EF40  F005         	goto	u1061
  1951  000A7C  EF42  F005         	goto	u1060
  1952  000A80                     u1061:
  1953  000A80  EF60  F005         	goto	l1739
  1954  000A84                     u1060:
  1955  000A84                     l1729:
  1956                           
  1957                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  1958  000A84  063E               	decf	dtoa@i^0,f,c
  1959  000A86  A0D8               	btfss	status,0,c
  1960  000A88  063F               	decf	(dtoa@i+1)^0,f,c
  1961  000A8A                     
  1962                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  1963  000A8A  5034               	movf	dtoa@s^0,w,c
  1964  000A8C  1035               	iorwf	(dtoa@s+1)^0,w,c
  1965  000A8E  A4D8               	btfss	status,2,c
  1966  000A90  EF4C  F005         	goto	u1071
  1967  000A94  EF4E  F005         	goto	u1070
  1968  000A98                     u1071:
  1969  000A98  EF54  F005         	goto	l1735
  1970  000A9C                     u1070:
  1971  000A9C  0E00               	movlw	0
  1972  000A9E  6E2F               	movwf	(_dtoa$232+1)^0,c
  1973  000AA0  0E2B               	movlw	43
  1974  000AA2  6E2E               	movwf	_dtoa$232^0,c
  1975  000AA4  EF58  F005         	goto	l1737
  1976  000AA8                     l1735:
  1977  000AA8  0E00               	movlw	0
  1978  000AAA  6E2F               	movwf	(_dtoa$232+1)^0,c
  1979  000AAC  0E2D               	movlw	45
  1980  000AAE  6E2E               	movwf	_dtoa$232^0,c
  1981  000AB0                     l1737:
  1982  000AB0  0E71               	movlw	low _dbuf
  1983  000AB2  243E               	addwf	dtoa@i^0,w,c
  1984  000AB4  6ED9               	movwf	fsr2l,c
  1985  000AB6  0E00               	movlw	high _dbuf
  1986  000AB8  203F               	addwfc	(dtoa@i+1)^0,w,c
  1987  000ABA  6EDA               	movwf	fsr2h,c
  1988  000ABC  C02E  FFDF         	movff	_dtoa$232,indf2
  1989  000AC0                     l1739:
  1990                           
  1991                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  1992  000AC0  C01C  F011         	movff	dtoa@fp,pad@fp
  1993  000AC4  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  1994  000AC8  0E71               	movlw	low _dbuf
  1995  000ACA  243E               	addwf	dtoa@i^0,w,c
  1996  000ACC  6E13               	movwf	pad@buf^0,c
  1997  000ACE  0E00               	movlw	high _dbuf
  1998  000AD0  203F               	addwfc	(dtoa@i+1)^0,w,c
  1999  000AD2  6E14               	movwf	(pad@buf+1)^0,c
  2000  000AD4  C032  F015         	movff	dtoa@w,pad@p
  2001  000AD8  C033  F016         	movff	dtoa@w+1,pad@p+1
  2002  000ADC  EC2A  F008         	call	_pad	;wreg free
  2003  000AE0  C011  F01C         	movff	?_pad,?_dtoa
  2004  000AE4  C012  F01D         	movff	?_pad+1,?_dtoa+1
  2005  000AE8  0012               	return		;funcret
  2006  000AEA                     __end_of_dtoa:
  2007                           	opt callstack 0
  2008                           
  2009 ;; *************** function _pad *****************
  2010 ;; Defined at:
  2011 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  2012 ;; Parameters:    Size  Location     Type
  2013 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  2014 ;;		 -> sprintf@f(6), 
  2015 ;;  buf             2   18[COMRAM] PTR unsigned char 
  2016 ;;		 -> dbuf(32), 
  2017 ;;  p               2   20[COMRAM] int 
  2018 ;; Auto vars:     Size  Location     Type
  2019 ;;  w               2   25[COMRAM] int 
  2020 ;;  i               2   23[COMRAM] int 
  2021 ;; Return value:  Size  Location     Type
  2022 ;;                  2   16[COMRAM] int 
  2023 ;; Registers used:
  2024 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2025 ;; Tracked objects:
  2026 ;;		On entry : 0/0
  2027 ;;		On exit  : 0/0
  2028 ;;		Unchanged: 0/0
  2029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2030 ;;      Params:         6       0       0       0       0       0       0       0       0
  2031 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2032 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2033 ;;      Totals:        11       0       0       0       0       0       0       0       0
  2034 ;;Total ram usage:       11 bytes
  2035 ;; Hardware stack levels used:    1
  2036 ;; Hardware stack levels required when called:    3
  2037 ;; This function calls:
  2038 ;;		_fputc
  2039 ;;		_fputs
  2040 ;;		_strlen
  2041 ;; This function is called by:
  2042 ;;		_dtoa
  2043 ;; This function uses a non-reentrant model
  2044 ;;
  2045                           
  2046                           	psect	text9
  2047  001054                     __ptext9:
  2048                           	opt callstack 0
  2049  001054                     _pad:
  2050                           	opt callstack 21
  2051  001054                     
  2052                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  2053  001054  0100               	movlb	0	; () banked
  2054  001056  A166               	btfss	_flags& (0+255),0,b
  2055  001058  EF30  F008         	goto	u741
  2056  00105C  EF32  F008         	goto	u740
  2057  001060                     u741:
  2058  001060  EF3C  F008         	goto	l1567
  2059  001064                     u740:
  2060  001064                     
  2061                           ; BSR set to: 0
  2062                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  2063  001064  C013  F00A         	movff	pad@buf,fputs@s
  2064  001068  C014  F00B         	movff	pad@buf+1,fputs@s+1
  2065  00106C  C011  F00C         	movff	pad@fp,fputs@fp
  2066  001070  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  2067  001074  EC28  F00B         	call	_fputs	;wreg free
  2068  001078                     l1567:
  2069                           
  2070                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  2071  001078  BE16               	btfsc	(pad@p+1)^0,7,c
  2072  00107A  EF41  F008         	goto	u751
  2073  00107E  EF43  F008         	goto	u750
  2074  001082                     u751:
  2075  001082  EF49  F008         	goto	l1571
  2076  001086                     u750:
  2077  001086  C015  F01A         	movff	pad@p,pad@w
  2078  00108A  C016  F01B         	movff	pad@p+1,pad@w+1
  2079  00108E  EF4D  F008         	goto	l201
  2080  001092                     l1571:
  2081  001092  0E00               	movlw	0
  2082  001094  6E1B               	movwf	(pad@w+1)^0,c
  2083  001096  0E00               	movlw	0
  2084  001098  6E1A               	movwf	pad@w^0,c
  2085  00109A                     l201:
  2086                           
  2087                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  2088  00109A  0E00               	movlw	0
  2089  00109C  6E19               	movwf	(pad@i+1)^0,c
  2090  00109E  0E00               	movlw	0
  2091  0010A0  6E18               	movwf	pad@i^0,c
  2092                           
  2093                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  2094  0010A2  EF5F  F008         	goto	l1577
  2095  0010A6                     l1573:
  2096                           
  2097                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  2098  0010A6  0E00               	movlw	0
  2099  0010A8  6E02               	movwf	(fputc@c+1)^0,c
  2100  0010AA  0E20               	movlw	32
  2101  0010AC  6E01               	movwf	fputc@c^0,c
  2102  0010AE  C011  F003         	movff	pad@fp,fputc@fp
  2103  0010B2  C012  F004         	movff	pad@fp+1,fputc@fp+1
  2104  0010B6  ECC5  F007         	call	_fputc	;wreg free
  2105  0010BA                     
  2106                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  2107  0010BA  4A18               	infsnz	pad@i^0,f,c
  2108  0010BC  2A19               	incf	(pad@i+1)^0,f,c
  2109  0010BE                     l1577:
  2110                           
  2111                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  2112  0010BE  501A               	movf	pad@w^0,w,c
  2113  0010C0  5C18               	subwf	pad@i^0,w,c
  2114  0010C2  5019               	movf	(pad@i+1)^0,w,c
  2115  0010C4  0A80               	xorlw	128
  2116  0010C6  6E17               	movwf	??_pad^0,c
  2117  0010C8  501B               	movf	(pad@w+1)^0,w,c
  2118  0010CA  0A80               	xorlw	128
  2119  0010CC  5817               	subwfb	??_pad^0,w,c
  2120  0010CE  A0D8               	btfss	status,0,c
  2121  0010D0  EF6C  F008         	goto	u761
  2122  0010D4  EF6E  F008         	goto	u760
  2123  0010D8                     u761:
  2124  0010D8  EF53  F008         	goto	l1573
  2125  0010DC                     u760:
  2126  0010DC                     
  2127                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  2128  0010DC  0100               	movlb	0	; () banked
  2129  0010DE  B166               	btfsc	_flags& (0+255),0,b
  2130  0010E0  EF74  F008         	goto	u771
  2131  0010E4  EF76  F008         	goto	u770
  2132  0010E8                     u771:
  2133  0010E8  EF80  F008         	goto	l1581
  2134  0010EC                     u770:
  2135  0010EC                     
  2136                           ; BSR set to: 0
  2137                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  2138  0010EC  C013  F00A         	movff	pad@buf,fputs@s
  2139  0010F0  C014  F00B         	movff	pad@buf+1,fputs@s+1
  2140  0010F4  C011  F00C         	movff	pad@fp,fputs@fp
  2141  0010F8  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  2142  0010FC  EC28  F00B         	call	_fputs	;wreg free
  2143  001100                     l1581:
  2144                           
  2145                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  2146  001100  C013  F001         	movff	pad@buf,strlen@s
  2147  001104  C014  F002         	movff	pad@buf+1,strlen@s+1
  2148  001108  EC6A  F00B         	call	_strlen	;wreg free
  2149  00110C  501A               	movf	pad@w^0,w,c
  2150  00110E  2401               	addwf	?_strlen^0,w,c
  2151  001110  6E11               	movwf	?_pad^0,c
  2152  001112  501B               	movf	(pad@w+1)^0,w,c
  2153  001114  2002               	addwfc	(?_strlen+1)^0,w,c
  2154  001116  6E12               	movwf	(?_pad+1)^0,c
  2155  001118  0012               	return		;funcret
  2156  00111A                     __end_of_pad:
  2157                           	opt callstack 0
  2158                           
  2159 ;; *************** function _strlen *****************
  2160 ;; Defined at:
  2161 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strlen.c"
  2162 ;; Parameters:    Size  Location     Type
  2163 ;;  s               2    0[COMRAM] PTR const unsigned char 
  2164 ;;		 -> dbuf(32), 
  2165 ;; Auto vars:     Size  Location     Type
  2166 ;;  a               2    2[COMRAM] PTR const unsigned char 
  2167 ;;		 -> dbuf(32), 
  2168 ;; Return value:  Size  Location     Type
  2169 ;;                  2    0[COMRAM] unsigned int 
  2170 ;; Registers used:
  2171 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2172 ;; Tracked objects:
  2173 ;;		On entry : 0/0
  2174 ;;		On exit  : 0/0
  2175 ;;		Unchanged: 0/0
  2176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2177 ;;      Params:         2       0       0       0       0       0       0       0       0
  2178 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2179 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2180 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2181 ;;Total ram usage:        4 bytes
  2182 ;; Hardware stack levels used:    1
  2183 ;; This function calls:
  2184 ;;		Nothing
  2185 ;; This function is called by:
  2186 ;;		_pad
  2187 ;; This function uses a non-reentrant model
  2188 ;;
  2189                           
  2190                           	psect	text10
  2191  0016D4                     __ptext10:
  2192                           	opt callstack 0
  2193  0016D4                     _strlen:
  2194                           	opt callstack 23
  2195  0016D4  C001  F003         	movff	strlen@s,strlen@a
  2196  0016D8  C002  F004         	movff	strlen@s+1,strlen@a+1
  2197  0016DC  EF72  F00B         	goto	l1553
  2198  0016E0                     l1551:
  2199  0016E0  4A01               	infsnz	strlen@s^0,f,c
  2200  0016E2  2A02               	incf	(strlen@s+1)^0,f,c
  2201  0016E4                     l1553:
  2202  0016E4  C001  FFD9         	movff	strlen@s,fsr2l
  2203  0016E8  C002  FFDA         	movff	strlen@s+1,fsr2h
  2204  0016EC  50DF               	movf	indf2,w,c
  2205  0016EE  A4D8               	btfss	status,2,c
  2206  0016F0  EF7C  F00B         	goto	u711
  2207  0016F4  EF7E  F00B         	goto	u710
  2208  0016F8                     u711:
  2209  0016F8  EF70  F00B         	goto	l1551
  2210  0016FC                     u710:
  2211  0016FC  5003               	movf	strlen@a^0,w,c
  2212  0016FE  5C01               	subwf	strlen@s^0,w,c
  2213  001700  6E01               	movwf	?_strlen^0,c
  2214  001702  5004               	movf	(strlen@a+1)^0,w,c
  2215  001704  5802               	subwfb	(strlen@s+1)^0,w,c
  2216  001706  6E02               	movwf	(?_strlen+1)^0,c
  2217  001708  0012               	return		;funcret
  2218  00170A                     __end_of_strlen:
  2219                           	opt callstack 0
  2220                           
  2221 ;; *************** function _fputs *****************
  2222 ;; Defined at:
  2223 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_fputs.c"
  2224 ;; Parameters:    Size  Location     Type
  2225 ;;  s               2    9[COMRAM] PTR const unsigned char 
  2226 ;;		 -> dbuf(32), 
  2227 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  2228 ;;		 -> sprintf@f(6), 
  2229 ;; Auto vars:     Size  Location     Type
  2230 ;;  i               2   14[COMRAM] int 
  2231 ;;  c               1   13[COMRAM] unsigned char 
  2232 ;; Return value:  Size  Location     Type
  2233 ;;                  2    9[COMRAM] int 
  2234 ;; Registers used:
  2235 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2236 ;; Tracked objects:
  2237 ;;		On entry : 0/0
  2238 ;;		On exit  : 0/0
  2239 ;;		Unchanged: 0/0
  2240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2241 ;;      Params:         4       0       0       0       0       0       0       0       0
  2242 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2243 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2244 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2245 ;;Total ram usage:        7 bytes
  2246 ;; Hardware stack levels used:    1
  2247 ;; Hardware stack levels required when called:    2
  2248 ;; This function calls:
  2249 ;;		_fputc
  2250 ;; This function is called by:
  2251 ;;		_pad
  2252 ;; This function uses a non-reentrant model
  2253 ;;
  2254                           
  2255                           	psect	text11
  2256  001650                     __ptext11:
  2257                           	opt callstack 0
  2258  001650                     _fputs:
  2259                           	opt callstack 21
  2260  001650  0E00               	movlw	0
  2261  001652  6E10               	movwf	(fputs@i+1)^0,c
  2262  001654  0E00               	movlw	0
  2263  001656  6E0F               	movwf	fputs@i^0,c
  2264  001658  EF39  F00B         	goto	l1547
  2265  00165C                     l1543:
  2266  00165C  C00E  F001         	movff	fputs@c,fputc@c
  2267  001660  6A02               	clrf	(fputc@c+1)^0,c
  2268  001662  C00C  F003         	movff	fputs@fp,fputc@fp
  2269  001666  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  2270  00166A  ECC5  F007         	call	_fputc	;wreg free
  2271  00166E  4A0F               	infsnz	fputs@i^0,f,c
  2272  001670  2A10               	incf	(fputs@i+1)^0,f,c
  2273  001672                     l1547:
  2274  001672  500F               	movf	fputs@i^0,w,c
  2275  001674  240A               	addwf	fputs@s^0,w,c
  2276  001676  6ED9               	movwf	fsr2l,c
  2277  001678  5010               	movf	(fputs@i+1)^0,w,c
  2278  00167A  200B               	addwfc	(fputs@s+1)^0,w,c
  2279  00167C  6EDA               	movwf	fsr2h,c
  2280  00167E  50DF               	movf	indf2,w,c
  2281  001680  6E0E               	movwf	fputs@c^0,c
  2282  001682  500E               	movf	fputs@c^0,w,c
  2283  001684  A4D8               	btfss	status,2,c
  2284  001686  EF47  F00B         	goto	u701
  2285  00168A  EF49  F00B         	goto	u700
  2286  00168E                     u701:
  2287  00168E  EF2E  F00B         	goto	l1543
  2288  001692                     u700:
  2289  001692  0012               	return		;funcret
  2290  001694                     __end_of_fputs:
  2291                           	opt callstack 0
  2292                           
  2293 ;; *************** function _fputc *****************
  2294 ;; Defined at:
  2295 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_fputc.c"
  2296 ;; Parameters:    Size  Location     Type
  2297 ;;  c               2    0[COMRAM] int 
  2298 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  2299 ;;		 -> sprintf@f(6), 
  2300 ;; Auto vars:     Size  Location     Type
  2301 ;;		None
  2302 ;; Return value:  Size  Location     Type
  2303 ;;                  2    0[COMRAM] int 
  2304 ;; Registers used:
  2305 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2306 ;; Tracked objects:
  2307 ;;		On entry : 0/0
  2308 ;;		On exit  : 0/0
  2309 ;;		Unchanged: 0/0
  2310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2311 ;;      Params:         4       0       0       0       0       0       0       0       0
  2312 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2313 ;;      Temps:          5       0       0       0       0       0       0       0       0
  2314 ;;      Totals:         9       0       0       0       0       0       0       0       0
  2315 ;;Total ram usage:        9 bytes
  2316 ;; Hardware stack levels used:    1
  2317 ;; Hardware stack levels required when called:    1
  2318 ;; This function calls:
  2319 ;;		_putch
  2320 ;; This function is called by:
  2321 ;;		_pad
  2322 ;;		_vfpfcnvrt
  2323 ;;		_fputs
  2324 ;; This function uses a non-reentrant model
  2325 ;;
  2326                           
  2327                           	psect	text12
  2328  000F8A                     __ptext12:
  2329                           	opt callstack 0
  2330  000F8A                     _fputc:
  2331                           	opt callstack 24
  2332  000F8A  5003               	movf	fputc@fp^0,w,c
  2333  000F8C  1004               	iorwf	(fputc@fp+1)^0,w,c
  2334  000F8E  B4D8               	btfsc	status,2,c
  2335  000F90  EFCC  F007         	goto	u661
  2336  000F94  EFCE  F007         	goto	u660
  2337  000F98                     u661:
  2338  000F98  EFD7  F007         	goto	l1531
  2339  000F9C                     u660:
  2340  000F9C  5003               	movf	fputc@fp^0,w,c
  2341  000F9E  1004               	iorwf	(fputc@fp+1)^0,w,c
  2342  000FA0  A4D8               	btfss	status,2,c
  2343  000FA2  EFD5  F007         	goto	u671
  2344  000FA6  EFD7  F007         	goto	u670
  2345  000FAA                     u671:
  2346  000FAA  EFDC  F007         	goto	l1533
  2347  000FAE                     u670:
  2348  000FAE                     l1531:
  2349  000FAE  5001               	movf	fputc@c^0,w,c
  2350  000FB0  EC10  F00C         	call	_putch
  2351  000FB4  EF29  F008         	goto	l939
  2352  000FB8                     l1533:
  2353  000FB8  EE20 F004          	lfsr	2,4
  2354  000FBC  5003               	movf	fputc@fp^0,w,c
  2355  000FBE  26D9               	addwf	fsr2l,f,c
  2356  000FC0  5004               	movf	(fputc@fp+1)^0,w,c
  2357  000FC2  22DA               	addwfc	fsr2h,f,c
  2358  000FC4  50DE               	movf	postinc2,w,c
  2359  000FC6  10DE               	iorwf	postinc2,w,c
  2360  000FC8  B4D8               	btfsc	status,2,c
  2361  000FCA  EFE9  F007         	goto	u681
  2362  000FCE  EFEB  F007         	goto	u680
  2363  000FD2                     u681:
  2364  000FD2  EF06  F008         	goto	l1537
  2365  000FD6                     u680:
  2366  000FD6  EE20 F004          	lfsr	2,4
  2367  000FDA  5003               	movf	fputc@fp^0,w,c
  2368  000FDC  26D9               	addwf	fsr2l,f,c
  2369  000FDE  5004               	movf	(fputc@fp+1)^0,w,c
  2370  000FE0  22DA               	addwfc	fsr2h,f,c
  2371  000FE2  EE10 F002          	lfsr	1,2
  2372  000FE6  5003               	movf	fputc@fp^0,w,c
  2373  000FE8  26E1               	addwf	fsr1l,f,c
  2374  000FEA  5004               	movf	(fputc@fp+1)^0,w,c
  2375  000FEC  22E2               	addwfc	fsr1h,f,c
  2376  000FEE  50DE               	movf	postinc2,w,c
  2377  000FF0  5CE6               	subwf	postinc1,w,c
  2378  000FF2  50E6               	movf	postinc1,w,c
  2379  000FF4  0A80               	xorlw	128
  2380  000FF6  6E09               	movwf	(??_fputc+4)^0,c
  2381  000FF8  50DE               	movf	postinc2,w,c
  2382  000FFA  0A80               	xorlw	128
  2383  000FFC  5809               	subwfb	(??_fputc+4)^0,w,c
  2384  000FFE  B0D8               	btfsc	status,0,c
  2385  001000  EF04  F008         	goto	u691
  2386  001004  EF06  F008         	goto	u690
  2387  001008                     u691:
  2388  001008  EF29  F008         	goto	l939
  2389  00100C                     u690:
  2390  00100C                     l1537:
  2391  00100C  EE20 F002          	lfsr	2,2
  2392  001010  5003               	movf	fputc@fp^0,w,c
  2393  001012  26D9               	addwf	fsr2l,f,c
  2394  001014  5004               	movf	(fputc@fp+1)^0,w,c
  2395  001016  22DA               	addwfc	fsr2h,f,c
  2396  001018  CFDE F005          	movff	postinc2,??_fputc
  2397  00101C  CFDD F006          	movff	postdec2,??_fputc+1
  2398  001020  C003  FFD9         	movff	fputc@fp,fsr2l
  2399  001024  C004  FFDA         	movff	fputc@fp+1,fsr2h
  2400  001028  CFDE F007          	movff	postinc2,??_fputc+2
  2401  00102C  CFDD F008          	movff	postdec2,??_fputc+3
  2402  001030  5005               	movf	??_fputc^0,w,c
  2403  001032  2407               	addwf	(??_fputc+2)^0,w,c
  2404  001034  6ED9               	movwf	fsr2l,c
  2405  001036  5006               	movf	(??_fputc+1)^0,w,c
  2406  001038  2008               	addwfc	(??_fputc+3)^0,w,c
  2407  00103A  6EDA               	movwf	fsr2h,c
  2408  00103C  C001  FFDF         	movff	fputc@c,indf2
  2409  001040  EE20 F002          	lfsr	2,2
  2410  001044  5003               	movf	fputc@fp^0,w,c
  2411  001046  26D9               	addwf	fsr2l,f,c
  2412  001048  5004               	movf	(fputc@fp+1)^0,w,c
  2413  00104A  22DA               	addwfc	fsr2h,f,c
  2414  00104C  2ADE               	incf	postinc2,f,c
  2415  00104E  0E00               	movlw	0
  2416  001050  22DD               	addwfc	postdec2,f,c
  2417  001052                     l939:
  2418  001052  0012               	return		;funcret
  2419  001054                     __end_of_fputc:
  2420                           	opt callstack 0
  2421                           
  2422 ;; *************** function _putch *****************
  2423 ;; Defined at:
  2424 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\putch.c"
  2425 ;; Parameters:    Size  Location     Type
  2426 ;;  c               1    wreg     unsigned char 
  2427 ;; Auto vars:     Size  Location     Type
  2428 ;;  c               1    0[COMRAM] unsigned char 
  2429 ;; Return value:  Size  Location     Type
  2430 ;;                  1    wreg      void 
  2431 ;; Registers used:
  2432 ;;		wreg
  2433 ;; Tracked objects:
  2434 ;;		On entry : 0/0
  2435 ;;		On exit  : 0/0
  2436 ;;		Unchanged: 0/0
  2437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2438 ;;      Params:         0       0       0       0       0       0       0       0       0
  2439 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2440 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2441 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2442 ;;Total ram usage:        0 bytes
  2443 ;; Hardware stack levels used:    1
  2444 ;; This function calls:
  2445 ;;		Nothing
  2446 ;; This function is called by:
  2447 ;;		_fputc
  2448 ;; This function uses a non-reentrant model
  2449 ;;
  2450                           
  2451                           	psect	text13
  2452  001820                     __ptext13:
  2453                           	opt callstack 0
  2454  001820                     _putch:
  2455                           	opt callstack 24
  2456  001820  0012               	return		;funcret
  2457  001822                     __end_of_putch:
  2458                           	opt callstack 0
  2459                           
  2460 ;; *************** function _abs *****************
  2461 ;; Defined at:
  2462 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\abs.c"
  2463 ;; Parameters:    Size  Location     Type
  2464 ;;  a               2   18[COMRAM] int 
  2465 ;; Auto vars:     Size  Location     Type
  2466 ;;		None
  2467 ;; Return value:  Size  Location     Type
  2468 ;;                  2   18[COMRAM] int 
  2469 ;; Registers used:
  2470 ;;		wreg, status,2, status,0
  2471 ;; Tracked objects:
  2472 ;;		On entry : 0/0
  2473 ;;		On exit  : 0/0
  2474 ;;		Unchanged: 0/0
  2475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2476 ;;      Params:         2       0       0       0       0       0       0       0       0
  2477 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2478 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2479 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2480 ;;Total ram usage:        4 bytes
  2481 ;; Hardware stack levels used:    1
  2482 ;; This function calls:
  2483 ;;		Nothing
  2484 ;; This function is called by:
  2485 ;;		_dtoa
  2486 ;; This function uses a non-reentrant model
  2487 ;;
  2488                           
  2489                           	psect	text14
  2490  001694                     __ptext14:
  2491                           	opt callstack 0
  2492  001694                     _abs:
  2493                           	opt callstack 24
  2494  001694  BE14               	btfsc	(abs@a+1)^0,7,c
  2495  001696  EF57  F00B         	goto	u780
  2496  00169A  5014               	movf	(abs@a+1)^0,w,c
  2497  00169C  E106               	bnz	u781
  2498  00169E  0413               	decf	abs@a^0,w,c
  2499  0016A0  B0D8               	btfsc	status,0,c
  2500  0016A2  EF55  F00B         	goto	u781
  2501  0016A6  EF57  F00B         	goto	u780
  2502  0016AA                     u781:
  2503  0016AA  EF65  F00B         	goto	l924
  2504  0016AE                     u780:
  2505  0016AE  C013  F015         	movff	abs@a,??_abs
  2506  0016B2  C014  F016         	movff	abs@a+1,??_abs+1
  2507  0016B6  1E15               	comf	??_abs^0,f,c
  2508  0016B8  1E16               	comf	(??_abs+1)^0,f,c
  2509  0016BA  4A15               	infsnz	??_abs^0,f,c
  2510  0016BC  2A16               	incf	(??_abs+1)^0,f,c
  2511  0016BE  C015  F013         	movff	??_abs,?_abs
  2512  0016C2  C016  F014         	movff	??_abs+1,?_abs+1
  2513  0016C6  EF69  F00B         	goto	l927
  2514  0016CA                     l924:
  2515  0016CA  C013  F013         	movff	abs@a,?_abs
  2516  0016CE  C014  F014         	movff	abs@a+1,?_abs+1
  2517  0016D2                     l927:
  2518  0016D2  0012               	return		;funcret
  2519  0016D4                     __end_of_abs:
  2520                           	opt callstack 0
  2521                           
  2522 ;; *************** function ___aomod *****************
  2523 ;; Defined at:
  2524 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\aomod.c"
  2525 ;; Parameters:    Size  Location     Type
  2526 ;;  dividend        8    0[COMRAM] long long 
  2527 ;;  divisor         8    8[COMRAM] long long 
  2528 ;; Auto vars:     Size  Location     Type
  2529 ;;  sign            1   17[COMRAM] unsigned char 
  2530 ;;  counter         1   16[COMRAM] unsigned char 
  2531 ;; Return value:  Size  Location     Type
  2532 ;;                  8    0[COMRAM] long long 
  2533 ;; Registers used:
  2534 ;;		wreg, status,2, status,0
  2535 ;; Tracked objects:
  2536 ;;		On entry : 0/0
  2537 ;;		On exit  : 0/0
  2538 ;;		Unchanged: 0/0
  2539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2540 ;;      Params:        16       0       0       0       0       0       0       0       0
  2541 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2542 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2543 ;;      Totals:        18       0       0       0       0       0       0       0       0
  2544 ;;Total ram usage:       18 bytes
  2545 ;; Hardware stack levels used:    1
  2546 ;; This function calls:
  2547 ;;		Nothing
  2548 ;; This function is called by:
  2549 ;;		_dtoa
  2550 ;; This function uses a non-reentrant model
  2551 ;;
  2552                           
  2553                           	psect	text15
  2554  000E26                     __ptext15:
  2555                           	opt callstack 0
  2556  000E26                     ___aomod:
  2557                           	opt callstack 24
  2558  000E26  0E00               	movlw	0
  2559  000E28  6E12               	movwf	___aomod@sign^0,c
  2560  000E2A  BE08               	btfsc	(___aomod@dividend+7)^0,7,c
  2561  000E2C  EF1C  F007         	goto	u860
  2562  000E30  EF1A  F007         	goto	u861
  2563  000E34                     u861:
  2564  000E34  EF2E  F007         	goto	l1641
  2565  000E38                     u860:
  2566  000E38  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2567  000E3A  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2568  000E3C  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2569  000E3E  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2570  000E40  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2571  000E42  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2572  000E44  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2573  000E46  6C01               	negf	___aomod@dividend^0,c
  2574  000E48  0E00               	movlw	0
  2575  000E4A  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2576  000E4C  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2577  000E4E  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2578  000E50  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2579  000E52  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2580  000E54  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2581  000E56  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2582  000E58  0E01               	movlw	1
  2583  000E5A  6E12               	movwf	___aomod@sign^0,c
  2584  000E5C                     l1641:
  2585  000E5C  BE10               	btfsc	(___aomod@divisor+7)^0,7,c
  2586  000E5E  EF35  F007         	goto	u870
  2587  000E62  EF33  F007         	goto	u871
  2588  000E66                     u871:
  2589  000E66  EF45  F007         	goto	l1645
  2590  000E6A                     u870:
  2591  000E6A  1E10               	comf	(___aomod@divisor+7)^0,f,c
  2592  000E6C  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  2593  000E6E  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  2594  000E70  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  2595  000E72  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  2596  000E74  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  2597  000E76  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  2598  000E78  6C09               	negf	___aomod@divisor^0,c
  2599  000E7A  0E00               	movlw	0
  2600  000E7C  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  2601  000E7E  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  2602  000E80  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  2603  000E82  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  2604  000E84  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  2605  000E86  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  2606  000E88  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  2607  000E8A                     l1645:
  2608  000E8A  5009               	movf	___aomod@divisor^0,w,c
  2609  000E8C  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  2610  000E8E  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  2611  000E90  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  2612  000E92  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  2613  000E94  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  2614  000E96  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  2615  000E98  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  2616  000E9A  B4D8               	btfsc	status,2,c
  2617  000E9C  EF52  F007         	goto	u881
  2618  000EA0  EF54  F007         	goto	u880
  2619  000EA4                     u881:
  2620  000EA4  EF9C  F007         	goto	l1661
  2621  000EA8                     u880:
  2622  000EA8  0E01               	movlw	1
  2623  000EAA  6E11               	movwf	___aomod@counter^0,c
  2624  000EAC  EF62  F007         	goto	l1651
  2625  000EB0                     l1649:
  2626  000EB0  90D8               	bcf	status,0,c
  2627  000EB2  3609               	rlcf	___aomod@divisor^0,f,c
  2628  000EB4  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  2629  000EB6  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  2630  000EB8  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  2631  000EBA  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  2632  000EBC  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  2633  000EBE  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  2634  000EC0  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  2635  000EC2  2A11               	incf	___aomod@counter^0,f,c
  2636  000EC4                     l1651:
  2637  000EC4  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  2638  000EC6  EF67  F007         	goto	u891
  2639  000ECA  EF69  F007         	goto	u890
  2640  000ECE                     u891:
  2641  000ECE  EF58  F007         	goto	l1649
  2642  000ED2                     u890:
  2643  000ED2                     l1653:
  2644  000ED2  5009               	movf	___aomod@divisor^0,w,c
  2645  000ED4  5C01               	subwf	___aomod@dividend^0,w,c
  2646  000ED6  500A               	movf	(___aomod@divisor+1)^0,w,c
  2647  000ED8  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  2648  000EDA  500B               	movf	(___aomod@divisor+2)^0,w,c
  2649  000EDC  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  2650  000EDE  500C               	movf	(___aomod@divisor+3)^0,w,c
  2651  000EE0  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  2652  000EE2  500D               	movf	(___aomod@divisor+4)^0,w,c
  2653  000EE4  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  2654  000EE6  500E               	movf	(___aomod@divisor+5)^0,w,c
  2655  000EE8  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  2656  000EEA  500F               	movf	(___aomod@divisor+6)^0,w,c
  2657  000EEC  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  2658  000EEE  5010               	movf	(___aomod@divisor+7)^0,w,c
  2659  000EF0  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  2660  000EF2  A0D8               	btfss	status,0,c
  2661  000EF4  EF7E  F007         	goto	u901
  2662  000EF8  EF80  F007         	goto	u900
  2663  000EFC                     u901:
  2664  000EFC  EF90  F007         	goto	l1657
  2665  000F00                     u900:
  2666  000F00  5009               	movf	___aomod@divisor^0,w,c
  2667  000F02  5E01               	subwf	___aomod@dividend^0,f,c
  2668  000F04  500A               	movf	(___aomod@divisor+1)^0,w,c
  2669  000F06  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  2670  000F08  500B               	movf	(___aomod@divisor+2)^0,w,c
  2671  000F0A  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  2672  000F0C  500C               	movf	(___aomod@divisor+3)^0,w,c
  2673  000F0E  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  2674  000F10  500D               	movf	(___aomod@divisor+4)^0,w,c
  2675  000F12  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  2676  000F14  500E               	movf	(___aomod@divisor+5)^0,w,c
  2677  000F16  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  2678  000F18  500F               	movf	(___aomod@divisor+6)^0,w,c
  2679  000F1A  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  2680  000F1C  5010               	movf	(___aomod@divisor+7)^0,w,c
  2681  000F1E  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  2682  000F20                     l1657:
  2683  000F20  90D8               	bcf	status,0,c
  2684  000F22  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  2685  000F24  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  2686  000F26  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  2687  000F28  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  2688  000F2A  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  2689  000F2C  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  2690  000F2E  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  2691  000F30  3209               	rrcf	___aomod@divisor^0,f,c
  2692  000F32  2E11               	decfsz	___aomod@counter^0,f,c
  2693  000F34  EF69  F007         	goto	l1653
  2694  000F38                     l1661:
  2695  000F38  5012               	movf	___aomod@sign^0,w,c
  2696  000F3A  B4D8               	btfsc	status,2,c
  2697  000F3C  EFA2  F007         	goto	u911
  2698  000F40  EFA4  F007         	goto	u910
  2699  000F44                     u911:
  2700  000F44  EFB4  F007         	goto	l1665
  2701  000F48                     u910:
  2702  000F48  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2703  000F4A  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2704  000F4C  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2705  000F4E  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2706  000F50  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2707  000F52  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2708  000F54  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2709  000F56  6C01               	negf	___aomod@dividend^0,c
  2710  000F58  0E00               	movlw	0
  2711  000F5A  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2712  000F5C  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2713  000F5E  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2714  000F60  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2715  000F62  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2716  000F64  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2717  000F66  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2718  000F68                     l1665:
  2719  000F68  C001  F001         	movff	___aomod@dividend,?___aomod
  2720  000F6C  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2721  000F70  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2722  000F74  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2723  000F78  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2724  000F7C  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2725  000F80  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2726  000F84  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2727  000F88  0012               	return		;funcret
  2728  000F8A                     __end_of___aomod:
  2729                           	opt callstack 0
  2730                           
  2731 ;; *************** function ___aodiv *****************
  2732 ;; Defined at:
  2733 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\aodiv.c"
  2734 ;; Parameters:    Size  Location     Type
  2735 ;;  dividend        8    0[COMRAM] long long 
  2736 ;;  divisor         8    8[COMRAM] long long 
  2737 ;; Auto vars:     Size  Location     Type
  2738 ;;  quotient        8   18[COMRAM] long long 
  2739 ;;  sign            1   17[COMRAM] unsigned char 
  2740 ;;  counter         1   16[COMRAM] unsigned char 
  2741 ;; Return value:  Size  Location     Type
  2742 ;;                  8    0[COMRAM] long long 
  2743 ;; Registers used:
  2744 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2745 ;; Tracked objects:
  2746 ;;		On entry : 0/0
  2747 ;;		On exit  : 0/0
  2748 ;;		Unchanged: 0/0
  2749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2750 ;;      Params:        16       0       0       0       0       0       0       0       0
  2751 ;;      Locals:        10       0       0       0       0       0       0       0       0
  2752 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2753 ;;      Totals:        26       0       0       0       0       0       0       0       0
  2754 ;;Total ram usage:       26 bytes
  2755 ;; Hardware stack levels used:    1
  2756 ;; This function calls:
  2757 ;;		Nothing
  2758 ;; This function is called by:
  2759 ;;		_dtoa
  2760 ;; This function uses a non-reentrant model
  2761 ;;
  2762                           
  2763                           	psect	text16
  2764  000C9E                     __ptext16:
  2765                           	opt callstack 0
  2766  000C9E                     ___aodiv:
  2767                           	opt callstack 24
  2768  000C9E  0E00               	movlw	0
  2769  000CA0  6E12               	movwf	___aodiv@sign^0,c
  2770  000CA2  BE10               	btfsc	(___aodiv@divisor+7)^0,7,c
  2771  000CA4  EF58  F006         	goto	u790
  2772  000CA8  EF56  F006         	goto	u791
  2773  000CAC                     u791:
  2774  000CAC  EF6A  F006         	goto	l1597
  2775  000CB0                     u790:
  2776  000CB0  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  2777  000CB2  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  2778  000CB4  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  2779  000CB6  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  2780  000CB8  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  2781  000CBA  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  2782  000CBC  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  2783  000CBE  6C09               	negf	___aodiv@divisor^0,c
  2784  000CC0  0E00               	movlw	0
  2785  000CC2  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  2786  000CC4  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  2787  000CC6  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  2788  000CC8  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  2789  000CCA  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  2790  000CCC  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  2791  000CCE  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  2792  000CD0  0E01               	movlw	1
  2793  000CD2  6E12               	movwf	___aodiv@sign^0,c
  2794  000CD4                     l1597:
  2795  000CD4  BE08               	btfsc	(___aodiv@dividend+7)^0,7,c
  2796  000CD6  EF71  F006         	goto	u800
  2797  000CDA  EF6F  F006         	goto	u801
  2798  000CDE                     u801:
  2799  000CDE  EF83  F006         	goto	l1603
  2800  000CE2                     u800:
  2801  000CE2  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  2802  000CE4  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  2803  000CE6  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  2804  000CE8  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  2805  000CEA  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  2806  000CEC  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  2807  000CEE  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  2808  000CF0  6C01               	negf	___aodiv@dividend^0,c
  2809  000CF2  0E00               	movlw	0
  2810  000CF4  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  2811  000CF6  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  2812  000CF8  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  2813  000CFA  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  2814  000CFC  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  2815  000CFE  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  2816  000D00  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  2817  000D02  0E01               	movlw	1
  2818  000D04  1A12               	xorwf	___aodiv@sign^0,f,c
  2819  000D06                     l1603:
  2820  000D06  EE20  F013         	lfsr	2,___aodiv@quotient
  2821  000D0A  0E07               	movlw	7
  2822  000D0C                     u811:
  2823  000D0C  6ADE               	clrf	postinc2,c
  2824  000D0E  06E8               	decf	wreg,f,c
  2825  000D10  E2FD               	bc	u811
  2826  000D12  5009               	movf	___aodiv@divisor^0,w,c
  2827  000D14  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  2828  000D16  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  2829  000D18  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  2830  000D1A  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  2831  000D1C  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  2832  000D1E  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  2833  000D20  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  2834  000D22  B4D8               	btfsc	status,2,c
  2835  000D24  EF96  F006         	goto	u821
  2836  000D28  EF98  F006         	goto	u820
  2837  000D2C                     u821:
  2838  000D2C  EFEA  F006         	goto	l1625
  2839  000D30                     u820:
  2840  000D30  0E01               	movlw	1
  2841  000D32  6E11               	movwf	___aodiv@counter^0,c
  2842  000D34  EFA6  F006         	goto	l1611
  2843  000D38                     l1609:
  2844  000D38  90D8               	bcf	status,0,c
  2845  000D3A  3609               	rlcf	___aodiv@divisor^0,f,c
  2846  000D3C  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  2847  000D3E  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  2848  000D40  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  2849  000D42  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  2850  000D44  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  2851  000D46  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  2852  000D48  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  2853  000D4A  2A11               	incf	___aodiv@counter^0,f,c
  2854  000D4C                     l1611:
  2855  000D4C  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  2856  000D4E  EFAB  F006         	goto	u831
  2857  000D52  EFAD  F006         	goto	u830
  2858  000D56                     u831:
  2859  000D56  EF9C  F006         	goto	l1609
  2860  000D5A                     u830:
  2861  000D5A                     l1613:
  2862  000D5A  90D8               	bcf	status,0,c
  2863  000D5C  3613               	rlcf	___aodiv@quotient^0,f,c
  2864  000D5E  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  2865  000D60  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  2866  000D62  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  2867  000D64  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  2868  000D66  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  2869  000D68  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  2870  000D6A  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  2871  000D6C  5009               	movf	___aodiv@divisor^0,w,c
  2872  000D6E  5C01               	subwf	___aodiv@dividend^0,w,c
  2873  000D70  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2874  000D72  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  2875  000D74  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2876  000D76  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  2877  000D78  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2878  000D7A  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  2879  000D7C  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2880  000D7E  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  2881  000D80  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2882  000D82  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  2883  000D84  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2884  000D86  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  2885  000D88  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2886  000D8A  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  2887  000D8C  A0D8               	btfss	status,0,c
  2888  000D8E  EFCB  F006         	goto	u841
  2889  000D92  EFCD  F006         	goto	u840
  2890  000D96                     u841:
  2891  000D96  EFDE  F006         	goto	l1621
  2892  000D9A                     u840:
  2893  000D9A  5009               	movf	___aodiv@divisor^0,w,c
  2894  000D9C  5E01               	subwf	___aodiv@dividend^0,f,c
  2895  000D9E  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2896  000DA0  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  2897  000DA2  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2898  000DA4  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  2899  000DA6  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2900  000DA8  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  2901  000DAA  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2902  000DAC  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  2903  000DAE  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2904  000DB0  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  2905  000DB2  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2906  000DB4  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  2907  000DB6  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2908  000DB8  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  2909  000DBA  8013               	bsf	___aodiv@quotient^0,0,c
  2910  000DBC                     l1621:
  2911  000DBC  90D8               	bcf	status,0,c
  2912  000DBE  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  2913  000DC0  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  2914  000DC2  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  2915  000DC4  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  2916  000DC6  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  2917  000DC8  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  2918  000DCA  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  2919  000DCC  3209               	rrcf	___aodiv@divisor^0,f,c
  2920  000DCE  2E11               	decfsz	___aodiv@counter^0,f,c
  2921  000DD0  EFAD  F006         	goto	l1613
  2922  000DD4                     l1625:
  2923  000DD4  5012               	movf	___aodiv@sign^0,w,c
  2924  000DD6  B4D8               	btfsc	status,2,c
  2925  000DD8  EFF0  F006         	goto	u851
  2926  000DDC  EFF2  F006         	goto	u850
  2927  000DE0                     u851:
  2928  000DE0  EF02  F007         	goto	l1629
  2929  000DE4                     u850:
  2930  000DE4  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  2931  000DE6  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  2932  000DE8  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  2933  000DEA  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  2934  000DEC  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  2935  000DEE  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  2936  000DF0  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  2937  000DF2  6C13               	negf	___aodiv@quotient^0,c
  2938  000DF4  0E00               	movlw	0
  2939  000DF6  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  2940  000DF8  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  2941  000DFA  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  2942  000DFC  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  2943  000DFE  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  2944  000E00  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  2945  000E02  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  2946  000E04                     l1629:
  2947  000E04  C013  F001         	movff	___aodiv@quotient,?___aodiv
  2948  000E08  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  2949  000E0C  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  2950  000E10  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  2951  000E14  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  2952  000E18  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  2953  000E1C  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  2954  000E20  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  2955  000E24  0012               	return		;funcret
  2956  000E26                     __end_of___aodiv:
  2957                           	opt callstack 0
  2958                           
  2959 ;; *************** function _LCD_Write_String *****************
  2960 ;; Defined at:
  2961 ;;		line 164 in file "lcdi2c.c"
  2962 ;; Parameters:    Size  Location     Type
  2963 ;;  Str             2    5[COMRAM] PTR unsigned char 
  2964 ;;		 -> STR_2(2), 
  2965 ;; Auto vars:     Size  Location     Type
  2966 ;;  i               2    9[COMRAM] int 
  2967 ;; Return value:  Size  Location     Type
  2968 ;;                  1    wreg      void 
  2969 ;; Registers used:
  2970 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2971 ;; Tracked objects:
  2972 ;;		On entry : 0/0
  2973 ;;		On exit  : 0/0
  2974 ;;		Unchanged: 0/0
  2975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2976 ;;      Params:         2       0       0       0       0       0       0       0       0
  2977 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2978 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2979 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2980 ;;Total ram usage:        6 bytes
  2981 ;; Hardware stack levels used:    1
  2982 ;; Hardware stack levels required when called:    5
  2983 ;; This function calls:
  2984 ;;		_LCD_Write_Char
  2985 ;; This function is called by:
  2986 ;;		_main
  2987 ;; This function uses a non-reentrant model
  2988 ;;
  2989                           
  2990                           	psect	text17
  2991  0015A8                     __ptext17:
  2992                           	opt callstack 0
  2993  0015A8                     _LCD_Write_String:
  2994                           	opt callstack 25
  2995  0015A8                     
  2996                           ;lcdi2c.c: 164: void LCD_Write_String(char* Str);lcdi2c.c: 165: {;lcdi2c.c: 166:   for(i
      +                          nt i=0; Str[i]!='\0'; i++)
  2997  0015A8  0E00               	movlw	0
  2998  0015AA  6E0B               	movwf	(LCD_Write_String@i+1)^0,c
  2999  0015AC  0E00               	movlw	0
  3000  0015AE  6E0A               	movwf	LCD_Write_String@i^0,c
  3001  0015B0  EFEA  F00A         	goto	l1955
  3002  0015B4                     l1951:
  3003                           
  3004                           ;lcdi2c.c: 167:     LCD_Write_Char(Str[i]);
  3005  0015B4  500A               	movf	LCD_Write_String@i^0,w,c
  3006  0015B6  2406               	addwf	LCD_Write_String@Str^0,w,c
  3007  0015B8  6E08               	movwf	??_LCD_Write_String^0,c
  3008  0015BA  500B               	movf	(LCD_Write_String@i+1)^0,w,c
  3009  0015BC  2007               	addwfc	(LCD_Write_String@Str+1)^0,w,c
  3010  0015BE  6E09               	movwf	(??_LCD_Write_String+1)^0,c
  3011  0015C0  C008  FFF6         	movff	??_LCD_Write_String,tblptrl
  3012  0015C4  C009  FFF7         	movff	??_LCD_Write_String+1,tblptrh
  3013  0015C8                     	if	0	;tblptru may be non-zero
  3014  0015C8                     	endif
  3015  0015C8                     	if	0	;tblptru may be non-zero
  3016  0015C8                     	endif
  3017  0015C8  0008               	tblrd		*
  3018  0015CA  50F5               	movf	tablat,w,c
  3019  0015CC  ECCB  F00B         	call	_LCD_Write_Char
  3020  0015D0  4A0A               	infsnz	LCD_Write_String@i^0,f,c
  3021  0015D2  2A0B               	incf	(LCD_Write_String@i+1)^0,f,c
  3022  0015D4                     l1955:
  3023  0015D4  500A               	movf	LCD_Write_String@i^0,w,c
  3024  0015D6  2406               	addwf	LCD_Write_String@Str^0,w,c
  3025  0015D8  6E08               	movwf	??_LCD_Write_String^0,c
  3026  0015DA  500B               	movf	(LCD_Write_String@i+1)^0,w,c
  3027  0015DC  2007               	addwfc	(LCD_Write_String@Str+1)^0,w,c
  3028  0015DE  6E09               	movwf	(??_LCD_Write_String+1)^0,c
  3029  0015E0  C008  FFF6         	movff	??_LCD_Write_String,tblptrl
  3030  0015E4  C009  FFF7         	movff	??_LCD_Write_String+1,tblptrh
  3031  0015E8                     	if	0	;tblptru may be non-zero
  3032  0015E8                     	endif
  3033  0015E8                     	if	0	;tblptru may be non-zero
  3034  0015E8                     	endif
  3035  0015E8  0008               	tblrd		*
  3036  0015EA  50F5               	movf	tablat,w,c
  3037  0015EC  0900               	iorlw	0
  3038  0015EE  A4D8               	btfss	status,2,c
  3039  0015F0  EFFC  F00A         	goto	u1261
  3040  0015F4  EFFE  F00A         	goto	u1260
  3041  0015F8                     u1261:
  3042  0015F8  EFDA  F00A         	goto	l1951
  3043  0015FC                     u1260:
  3044  0015FC  0012               	return		;funcret
  3045  0015FE                     __end_of_LCD_Write_String:
  3046                           	opt callstack 0
  3047                           
  3048 ;; *************** function _LCD_Write_Char *****************
  3049 ;; Defined at:
  3050 ;;		line 128 in file "lcdi2c.c"
  3051 ;; Parameters:    Size  Location     Type
  3052 ;;  Data            1    wreg     unsigned char 
  3053 ;; Auto vars:     Size  Location     Type
  3054 ;;  Data            1    4[COMRAM] unsigned char 
  3055 ;; Return value:  Size  Location     Type
  3056 ;;                  1    wreg      void 
  3057 ;; Registers used:
  3058 ;;		wreg, status,2, status,0, cstack
  3059 ;; Tracked objects:
  3060 ;;		On entry : 0/0
  3061 ;;		On exit  : 0/0
  3062 ;;		Unchanged: 0/0
  3063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3064 ;;      Params:         0       0       0       0       0       0       0       0       0
  3065 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3066 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3067 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3068 ;;Total ram usage:        1 bytes
  3069 ;; Hardware stack levels used:    1
  3070 ;; Hardware stack levels required when called:    4
  3071 ;; This function calls:
  3072 ;;		_LCD_Write_4Bit
  3073 ;; This function is called by:
  3074 ;;		_LCD_Write_String
  3075 ;;		_LCD_Write_Convert_String
  3076 ;; This function uses a non-reentrant model
  3077 ;;
  3078                           
  3079                           	psect	text18
  3080  001796                     __ptext18:
  3081                           	opt callstack 0
  3082  001796                     _LCD_Write_Char:
  3083                           	opt callstack 24
  3084                           
  3085                           ;incstack = 0
  3086                           ;LCD_Write_Char@Data stored from wreg
  3087  001796  6E05               	movwf	LCD_Write_Char@Data^0,c
  3088  001798                     
  3089                           ;lcdi2c.c: 128: void LCD_Write_Char(char Data);lcdi2c.c: 129: {;lcdi2c.c: 130:   RS = 1;
  3090  001798  0E01               	movlw	1
  3091  00179A  0100               	movlb	0	; () banked
  3092  00179C  6F70               	movwf	_RS& (0+255),b
  3093  00179E                     
  3094                           ; BSR set to: 0
  3095                           ;lcdi2c.c: 131:   LCD_Write_4Bit(Data & 0xF0);
  3096  00179E  5005               	movf	LCD_Write_Char@Data^0,w,c
  3097  0017A0  0BF0               	andlw	240
  3098  0017A2  ECAC  F00B         	call	_LCD_Write_4Bit
  3099  0017A6                     
  3100                           ;lcdi2c.c: 132:   LCD_Write_4Bit((Data << 4) & 0xF0);
  3101  0017A6  3805               	swapf	LCD_Write_Char@Data^0,w,c
  3102  0017A8  0BF0               	andlw	240
  3103  0017AA  0BF0               	andlw	240
  3104  0017AC  ECAC  F00B         	call	_LCD_Write_4Bit
  3105  0017B0  0012               	return		;funcret
  3106  0017B2                     __end_of_LCD_Write_Char:
  3107                           	opt callstack 0
  3108                           
  3109 ;; *************** function _LCD_Set_Cursor *****************
  3110 ;; Defined at:
  3111 ;;		line 179 in file "lcdi2c.c"
  3112 ;; Parameters:    Size  Location     Type
  3113 ;;  ROW             1    wreg     unsigned char 
  3114 ;;  COL             1    5[COMRAM] unsigned char 
  3115 ;; Auto vars:     Size  Location     Type
  3116 ;;  ROW             1    8[COMRAM] unsigned char 
  3117 ;; Return value:  Size  Location     Type
  3118 ;;                  1    wreg      void 
  3119 ;; Registers used:
  3120 ;;		wreg, status,2, status,0, cstack
  3121 ;; Tracked objects:
  3122 ;;		On entry : 0/0
  3123 ;;		On exit  : 0/0
  3124 ;;		Unchanged: 0/0
  3125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3126 ;;      Params:         1       0       0       0       0       0       0       0       0
  3127 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3128 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3129 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3130 ;;Total ram usage:        4 bytes
  3131 ;; Hardware stack levels used:    1
  3132 ;; Hardware stack levels required when called:    5
  3133 ;; This function calls:
  3134 ;;		_LCD_CMD
  3135 ;; This function is called by:
  3136 ;;		_main
  3137 ;; This function uses a non-reentrant model
  3138 ;;
  3139                           
  3140                           	psect	text19
  3141  00147C                     __ptext19:
  3142                           	opt callstack 0
  3143  00147C                     _LCD_Set_Cursor:
  3144                           	opt callstack 25
  3145                           
  3146                           ;incstack = 0
  3147                           ;LCD_Set_Cursor@ROW stored from wreg
  3148  00147C  6E09               	movwf	LCD_Set_Cursor@ROW^0,c
  3149  00147E                     
  3150                           ;lcdi2c.c: 179: void LCD_Set_Cursor(unsigned char ROW, unsigned char COL);lcdi2c.c: 180:
      +                           {;lcdi2c.c: 181:   switch(ROW)
  3151  00147E  EF59  F00A         	goto	l1967
  3152  001482                     l1959:
  3153                           
  3154                           ;lcdi2c.c: 184:       LCD_CMD(0xC0 + COL-1);
  3155  001482  5006               	movf	LCD_Set_Cursor@COL^0,w,c
  3156  001484  0FBF               	addlw	191
  3157  001486  ECD9  F00B         	call	_LCD_CMD
  3158                           
  3159                           ;lcdi2c.c: 185:       break;
  3160  00148A  EF72  F00A         	goto	l119
  3161  00148E                     l1961:
  3162                           
  3163                           ;lcdi2c.c: 187:       LCD_CMD(0x94 + COL-1);
  3164  00148E  5006               	movf	LCD_Set_Cursor@COL^0,w,c
  3165  001490  0F93               	addlw	147
  3166  001492  ECD9  F00B         	call	_LCD_CMD
  3167                           
  3168                           ;lcdi2c.c: 188:       break;
  3169  001496  EF72  F00A         	goto	l119
  3170  00149A                     l1963:
  3171                           
  3172                           ;lcdi2c.c: 190:       LCD_CMD(0xD4 + COL-1);
  3173  00149A  5006               	movf	LCD_Set_Cursor@COL^0,w,c
  3174  00149C  0FD3               	addlw	211
  3175  00149E  ECD9  F00B         	call	_LCD_CMD
  3176                           
  3177                           ;lcdi2c.c: 191:       break;
  3178  0014A2  EF72  F00A         	goto	l119
  3179  0014A6                     l1965:
  3180                           
  3181                           ;lcdi2c.c: 194:       LCD_CMD(0x80 + COL-1);
  3182  0014A6  5006               	movf	LCD_Set_Cursor@COL^0,w,c
  3183  0014A8  0F7F               	addlw	127
  3184  0014AA  ECD9  F00B         	call	_LCD_CMD
  3185                           
  3186                           ;lcdi2c.c: 195:   }
  3187  0014AE  EF72  F00A         	goto	l119
  3188  0014B2                     l1967:
  3189  0014B2  5009               	movf	LCD_Set_Cursor@ROW^0,w,c
  3190  0014B4  6E07               	movwf	??_LCD_Set_Cursor^0,c
  3191  0014B6  6A08               	clrf	(??_LCD_Set_Cursor+1)^0,c
  3192                           
  3193                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3194                           ; Switch size 1, requested type "simple"
  3195                           ; Number of cases is 1, Range of values is 0 to 0
  3196                           ; switch strategies available:
  3197                           ; Name         Instructions Cycles
  3198                           ; simple_byte            4     3 (average)
  3199                           ;	Chosen strategy is simple_byte
  3200  0014B8  5008               	movf	(??_LCD_Set_Cursor+1)^0,w,c
  3201  0014BA  0A00               	xorlw	0	; case 0
  3202  0014BC  B4D8               	btfsc	status,2,c
  3203  0014BE  EF63  F00A         	goto	l2089
  3204  0014C2  EF53  F00A         	goto	l1965
  3205  0014C6                     l2089:
  3206                           
  3207                           ; Switch size 1, requested type "simple"
  3208                           ; Number of cases is 3, Range of values is 2 to 4
  3209                           ; switch strategies available:
  3210                           ; Name         Instructions Cycles
  3211                           ; simple_byte           10     6 (average)
  3212                           ;	Chosen strategy is simple_byte
  3213  0014C6  5007               	movf	??_LCD_Set_Cursor^0,w,c
  3214  0014C8  0A02               	xorlw	2	; case 2
  3215  0014CA  B4D8               	btfsc	status,2,c
  3216  0014CC  EF41  F00A         	goto	l1959
  3217  0014D0  0A01               	xorlw	1	; case 3
  3218  0014D2  B4D8               	btfsc	status,2,c
  3219  0014D4  EF47  F00A         	goto	l1961
  3220  0014D8  0A07               	xorlw	7	; case 4
  3221  0014DA  B4D8               	btfsc	status,2,c
  3222  0014DC  EF4D  F00A         	goto	l1963
  3223  0014E0  EF53  F00A         	goto	l1965
  3224  0014E4                     l119:
  3225  0014E4  0012               	return		;funcret
  3226  0014E6                     __end_of_LCD_Set_Cursor:
  3227                           	opt callstack 0
  3228                           
  3229 ;; *************** function _LCD_Init *****************
  3230 ;; Defined at:
  3231 ;;		line 81 in file "lcdi2c.c"
  3232 ;; Parameters:    Size  Location     Type
  3233 ;;  I2C_Add         1    wreg     unsigned char 
  3234 ;; Auto vars:     Size  Location     Type
  3235 ;;  I2C_Add         1    6[COMRAM] unsigned char 
  3236 ;; Return value:  Size  Location     Type
  3237 ;;                  1    wreg      void 
  3238 ;; Registers used:
  3239 ;;		wreg, status,2, status,0, cstack
  3240 ;; Tracked objects:
  3241 ;;		On entry : 0/0
  3242 ;;		On exit  : 0/0
  3243 ;;		Unchanged: 0/0
  3244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3245 ;;      Params:         0       0       0       0       0       0       0       0       0
  3246 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3247 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3248 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3249 ;;Total ram usage:        2 bytes
  3250 ;; Hardware stack levels used:    1
  3251 ;; Hardware stack levels required when called:    5
  3252 ;; This function calls:
  3253 ;;		_IO_Expander_Write
  3254 ;;		_LCD_CMD
  3255 ;; This function is called by:
  3256 ;;		_main
  3257 ;; This function uses a non-reentrant model
  3258 ;;
  3259                           
  3260                           	psect	text20
  3261  00128E                     __ptext20:
  3262                           	opt callstack 0
  3263  00128E                     _LCD_Init:
  3264                           	opt callstack 25
  3265                           
  3266                           ;incstack = 0
  3267                           ;LCD_Init@I2C_Add stored from wreg
  3268  00128E  6E07               	movwf	LCD_Init@I2C_Add^0,c
  3269  001290                     
  3270                           ;lcdi2c.c: 81: void LCD_Init(unsigned char I2C_Add);lcdi2c.c: 82: {;lcdi2c.c: 83:   i2c_
      +                          add = I2C_Add;
  3271  001290  C007  F0A2         	movff	LCD_Init@I2C_Add,_i2c_add
  3272  001294                     
  3273                           ;lcdi2c.c: 84:   IO_Expander_Write(0x00);
  3274  001294  0E00               	movlw	0
  3275  001296  ECBC  F00B         	call	_IO_Expander_Write
  3276  00129A                     
  3277                           ;lcdi2c.c: 85:   _delay((unsigned long)((30)*(1000000/4000.0)));
  3278  00129A  0E0A               	movlw	10
  3279  00129C  6E06               	movwf	??_LCD_Init^0,c
  3280  00129E  0EBC               	movlw	188
  3281  0012A0                     u1327:
  3282  0012A0  2EE8               	decfsz	wreg,f,c
  3283  0012A2  D7FE               	bra	u1327
  3284  0012A4  2E06               	decfsz	??_LCD_Init^0,f,c
  3285  0012A6  D7FC               	bra	u1327
  3286  0012A8  D000               	nop2	
  3287                           
  3288                           ;lcdi2c.c: 86:   LCD_CMD(0x03);
  3289  0012AA  0E03               	movlw	3
  3290  0012AC  ECD9  F00B         	call	_LCD_CMD
  3291  0012B0                     
  3292                           ;lcdi2c.c: 87:   _delay((unsigned long)((5)*(1000000/4000.0)));
  3293  0012B0  0EFA               	movlw	250
  3294  0012B2                     u1337:
  3295  0012B2  D000               	nop2	
  3296  0012B4  2EE8               	decfsz	wreg,f,c
  3297  0012B6  D7FD               	bra	u1337
  3298  0012B8                     
  3299                           ;lcdi2c.c: 88:   LCD_CMD(0x03);
  3300  0012B8  0E03               	movlw	3
  3301  0012BA  ECD9  F00B         	call	_LCD_CMD
  3302                           
  3303                           ;lcdi2c.c: 89:   _delay((unsigned long)((5)*(1000000/4000.0)));
  3304  0012BE  0EFA               	movlw	250
  3305  0012C0                     u1347:
  3306  0012C0  D000               	nop2	
  3307  0012C2  2EE8               	decfsz	wreg,f,c
  3308  0012C4  D7FD               	bra	u1347
  3309  0012C6                     
  3310                           ;lcdi2c.c: 90:   LCD_CMD(0x03);
  3311  0012C6  0E03               	movlw	3
  3312  0012C8  ECD9  F00B         	call	_LCD_CMD
  3313  0012CC                     
  3314                           ;lcdi2c.c: 91:   _delay((unsigned long)((5)*(1000000/4000.0)));
  3315  0012CC  0EFA               	movlw	250
  3316  0012CE                     u1357:
  3317  0012CE  D000               	nop2	
  3318  0012D0  2EE8               	decfsz	wreg,f,c
  3319  0012D2  D7FD               	bra	u1357
  3320                           
  3321                           ;lcdi2c.c: 92:   LCD_CMD(0x02);
  3322  0012D4  0E02               	movlw	2
  3323  0012D6  ECD9  F00B         	call	_LCD_CMD
  3324  0012DA                     
  3325                           ;lcdi2c.c: 93:   _delay((unsigned long)((5)*(1000000/4000.0)));
  3326  0012DA  0EFA               	movlw	250
  3327  0012DC                     u1367:
  3328  0012DC  D000               	nop2	
  3329  0012DE  2EE8               	decfsz	wreg,f,c
  3330  0012E0  D7FD               	bra	u1367
  3331  0012E2                     
  3332                           ;lcdi2c.c: 94:   LCD_CMD(0x20 | (2 << 2));
  3333  0012E2  0E28               	movlw	40
  3334  0012E4  ECD9  F00B         	call	_LCD_CMD
  3335                           
  3336                           ;lcdi2c.c: 95:   _delay((unsigned long)((50)*(1000000/4000.0)));
  3337  0012E8  0E11               	movlw	17
  3338  0012EA  6E06               	movwf	??_LCD_Init^0,c
  3339  0012EC  0E3A               	movlw	58
  3340  0012EE                     u1377:
  3341  0012EE  2EE8               	decfsz	wreg,f,c
  3342  0012F0  D7FE               	bra	u1377
  3343  0012F2  2E06               	decfsz	??_LCD_Init^0,f,c
  3344  0012F4  D7FC               	bra	u1377
  3345  0012F6  D000               	nop2	
  3346  0012F8                     
  3347                           ;lcdi2c.c: 96:   LCD_CMD(0x0C);
  3348  0012F8  0E0C               	movlw	12
  3349  0012FA  ECD9  F00B         	call	_LCD_CMD
  3350  0012FE                     
  3351                           ;lcdi2c.c: 97:   _delay((unsigned long)((50)*(1000000/4000.0)));
  3352  0012FE  0E11               	movlw	17
  3353  001300  6E06               	movwf	??_LCD_Init^0,c
  3354  001302  0E3A               	movlw	58
  3355  001304                     u1387:
  3356  001304  2EE8               	decfsz	wreg,f,c
  3357  001306  D7FE               	bra	u1387
  3358  001308  2E06               	decfsz	??_LCD_Init^0,f,c
  3359  00130A  D7FC               	bra	u1387
  3360  00130C  D000               	nop2	
  3361                           
  3362                           ;lcdi2c.c: 98:   LCD_CMD(0x01);
  3363  00130E  0E01               	movlw	1
  3364  001310  ECD9  F00B         	call	_LCD_CMD
  3365  001314                     
  3366                           ;lcdi2c.c: 99:   _delay((unsigned long)((50)*(1000000/4000.0)));
  3367  001314  0E11               	movlw	17
  3368  001316  6E06               	movwf	??_LCD_Init^0,c
  3369  001318  0E3A               	movlw	58
  3370  00131A                     u1397:
  3371  00131A  2EE8               	decfsz	wreg,f,c
  3372  00131C  D7FE               	bra	u1397
  3373  00131E  2E06               	decfsz	??_LCD_Init^0,f,c
  3374  001320  D7FC               	bra	u1397
  3375  001322  D000               	nop2	
  3376  001324                     
  3377                           ;lcdi2c.c: 100:   LCD_CMD(0x04 | 0x02);
  3378  001324  0E06               	movlw	6
  3379  001326  ECD9  F00B         	call	_LCD_CMD
  3380                           
  3381                           ;lcdi2c.c: 101:   _delay((unsigned long)((50)*(1000000/4000.0)));
  3382  00132A  0E11               	movlw	17
  3383  00132C  6E06               	movwf	??_LCD_Init^0,c
  3384  00132E  0E3A               	movlw	58
  3385  001330                     u1407:
  3386  001330  2EE8               	decfsz	wreg,f,c
  3387  001332  D7FE               	bra	u1407
  3388  001334  2E06               	decfsz	??_LCD_Init^0,f,c
  3389  001336  D7FC               	bra	u1407
  3390  001338  D000               	nop2	
  3391  00133A  0012               	return		;funcret
  3392  00133C                     __end_of_LCD_Init:
  3393                           	opt callstack 0
  3394                           
  3395 ;; *************** function _LCD_Clear *****************
  3396 ;; Defined at:
  3397 ;;		line 222 in file "lcdi2c.c"
  3398 ;; Parameters:    Size  Location     Type
  3399 ;;		None
  3400 ;; Auto vars:     Size  Location     Type
  3401 ;;		None
  3402 ;; Return value:  Size  Location     Type
  3403 ;;                  1    wreg      void 
  3404 ;; Registers used:
  3405 ;;		wreg, status,2, status,0, cstack
  3406 ;; Tracked objects:
  3407 ;;		On entry : 0/0
  3408 ;;		On exit  : 0/0
  3409 ;;		Unchanged: 0/0
  3410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3411 ;;      Params:         0       0       0       0       0       0       0       0       0
  3412 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3413 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3414 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3415 ;;Total ram usage:        0 bytes
  3416 ;; Hardware stack levels used:    1
  3417 ;; Hardware stack levels required when called:    5
  3418 ;; This function calls:
  3419 ;;		_LCD_CMD
  3420 ;; This function is called by:
  3421 ;;		_main
  3422 ;; This function uses a non-reentrant model
  3423 ;;
  3424                           
  3425                           	psect	text21
  3426  001800                     __ptext21:
  3427                           	opt callstack 0
  3428  001800                     _LCD_Clear:
  3429                           	opt callstack 25
  3430  001800                     
  3431                           ;lcdi2c.c: 224:   LCD_CMD(0x01);
  3432  001800  0E01               	movlw	1
  3433  001802  ECD9  F00B         	call	_LCD_CMD
  3434  001806                     
  3435                           ;lcdi2c.c: 225:   _delay((unsigned long)((40)*(1000000/4000000.0)));
  3436  001806  0E03               	movlw	3
  3437  001808                     u1417:
  3438  001808  2EE8               	decfsz	wreg,f,c
  3439  00180A  D7FE               	bra	u1417
  3440  00180C  F000               	nop	
  3441  00180E  0012               	return		;funcret
  3442  001810                     __end_of_LCD_Clear:
  3443                           	opt callstack 0
  3444                           
  3445 ;; *************** function _LCD_CMD *****************
  3446 ;; Defined at:
  3447 ;;		line 121 in file "lcdi2c.c"
  3448 ;; Parameters:    Size  Location     Type
  3449 ;;  CMD             1    wreg     unsigned char 
  3450 ;; Auto vars:     Size  Location     Type
  3451 ;;  CMD             1    4[COMRAM] unsigned char 
  3452 ;; Return value:  Size  Location     Type
  3453 ;;                  1    wreg      void 
  3454 ;; Registers used:
  3455 ;;		wreg, status,2, status,0, cstack
  3456 ;; Tracked objects:
  3457 ;;		On entry : 0/0
  3458 ;;		On exit  : 0/0
  3459 ;;		Unchanged: 0/0
  3460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3461 ;;      Params:         0       0       0       0       0       0       0       0       0
  3462 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3463 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3464 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3465 ;;Total ram usage:        1 bytes
  3466 ;; Hardware stack levels used:    1
  3467 ;; Hardware stack levels required when called:    4
  3468 ;; This function calls:
  3469 ;;		_LCD_Write_4Bit
  3470 ;; This function is called by:
  3471 ;;		_LCD_Init
  3472 ;;		_LCD_Set_Cursor
  3473 ;;		_LCD_Clear
  3474 ;;		_LCD_SL
  3475 ;;		_LCD_SR
  3476 ;; This function uses a non-reentrant model
  3477 ;;
  3478                           
  3479                           	psect	text22
  3480  0017B2                     __ptext22:
  3481                           	opt callstack 0
  3482  0017B2                     _LCD_CMD:
  3483                           	opt callstack 25
  3484                           
  3485                           ;incstack = 0
  3486                           ;LCD_CMD@CMD stored from wreg
  3487  0017B2  6E05               	movwf	LCD_CMD@CMD^0,c
  3488  0017B4                     
  3489                           ;lcdi2c.c: 121: void LCD_CMD(unsigned char CMD);lcdi2c.c: 122: {;lcdi2c.c: 123:   RS = 0
      +                          ;
  3490  0017B4  0E00               	movlw	0
  3491  0017B6  0100               	movlb	0	; () banked
  3492  0017B8  6F70               	movwf	_RS& (0+255),b
  3493  0017BA                     
  3494                           ; BSR set to: 0
  3495                           ;lcdi2c.c: 124:   LCD_Write_4Bit(CMD & 0xF0);
  3496  0017BA  5005               	movf	LCD_CMD@CMD^0,w,c
  3497  0017BC  0BF0               	andlw	240
  3498  0017BE  ECAC  F00B         	call	_LCD_Write_4Bit
  3499  0017C2                     
  3500                           ;lcdi2c.c: 125:   LCD_Write_4Bit((CMD << 4) & 0xF0);
  3501  0017C2  3805               	swapf	LCD_CMD@CMD^0,w,c
  3502  0017C4  0BF0               	andlw	240
  3503  0017C6  0BF0               	andlw	240
  3504  0017C8  ECAC  F00B         	call	_LCD_Write_4Bit
  3505  0017CC  0012               	return		;funcret
  3506  0017CE                     __end_of_LCD_CMD:
  3507                           	opt callstack 0
  3508                           
  3509 ;; *************** function _LCD_Write_4Bit *****************
  3510 ;; Defined at:
  3511 ;;		line 112 in file "lcdi2c.c"
  3512 ;; Parameters:    Size  Location     Type
  3513 ;;  Nibble          1    wreg     unsigned char 
  3514 ;; Auto vars:     Size  Location     Type
  3515 ;;  Nibble          1    3[COMRAM] unsigned char 
  3516 ;; Return value:  Size  Location     Type
  3517 ;;                  1    wreg      void 
  3518 ;; Registers used:
  3519 ;;		wreg, status,2, status,0, cstack
  3520 ;; Tracked objects:
  3521 ;;		On entry : 0/0
  3522 ;;		On exit  : 0/0
  3523 ;;		Unchanged: 0/0
  3524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3525 ;;      Params:         0       0       0       0       0       0       0       0       0
  3526 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3527 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3528 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3529 ;;Total ram usage:        1 bytes
  3530 ;; Hardware stack levels used:    1
  3531 ;; Hardware stack levels required when called:    3
  3532 ;; This function calls:
  3533 ;;		_IO_Expander_Write
  3534 ;; This function is called by:
  3535 ;;		_LCD_CMD
  3536 ;;		_LCD_Write_Char
  3537 ;;		_LCD_Write_Int
  3538 ;; This function uses a non-reentrant model
  3539 ;;
  3540                           
  3541                           	psect	text23
  3542  001758                     __ptext23:
  3543                           	opt callstack 0
  3544  001758                     _LCD_Write_4Bit:
  3545                           	opt callstack 24
  3546                           
  3547                           ;incstack = 0
  3548                           ;LCD_Write_4Bit@Nibble stored from wreg
  3549  001758  6E04               	movwf	LCD_Write_4Bit@Nibble^0,c
  3550  00175A                     
  3551                           ;lcdi2c.c: 112: void LCD_Write_4Bit(unsigned char Nibble);lcdi2c.c: 113: {;lcdi2c.c: 115
      +                          :   Nibble |= RS;
  3552  00175A  0100               	movlb	0	; () banked
  3553  00175C  5170               	movf	_RS& (0+255),w,b
  3554  00175E  1204               	iorwf	LCD_Write_4Bit@Nibble^0,f,c
  3555  001760                     
  3556                           ; BSR set to: 0
  3557                           ;lcdi2c.c: 116:   IO_Expander_Write(Nibble | 0x04);
  3558  001760  5004               	movf	LCD_Write_4Bit@Nibble^0,w,c
  3559  001762  0904               	iorlw	4
  3560  001764  ECBC  F00B         	call	_IO_Expander_Write
  3561  001768                     
  3562                           ;lcdi2c.c: 117:   IO_Expander_Write(Nibble & 0xFB);
  3563  001768  5004               	movf	LCD_Write_4Bit@Nibble^0,w,c
  3564  00176A  0BFB               	andlw	251
  3565  00176C  ECBC  F00B         	call	_IO_Expander_Write
  3566  001770                     
  3567                           ;lcdi2c.c: 118:   _delay((unsigned long)((50)*(1000000/4000000.0)));
  3568  001770  0E04               	movlw	4
  3569  001772                     u1427:
  3570  001772  2EE8               	decfsz	wreg,f,c
  3571  001774  D7FE               	bra	u1427
  3572  001776  0012               	return		;funcret
  3573  001778                     __end_of_LCD_Write_4Bit:
  3574                           	opt callstack 0
  3575                           
  3576 ;; *************** function _IO_Expander_Write *****************
  3577 ;; Defined at:
  3578 ;;		line 104 in file "lcdi2c.c"
  3579 ;; Parameters:    Size  Location     Type
  3580 ;;  Data            1    wreg     unsigned char 
  3581 ;; Auto vars:     Size  Location     Type
  3582 ;;  Data            1    2[COMRAM] unsigned char 
  3583 ;; Return value:  Size  Location     Type
  3584 ;;                  1    wreg      void 
  3585 ;; Registers used:
  3586 ;;		wreg, status,2, status,0, cstack
  3587 ;; Tracked objects:
  3588 ;;		On entry : 0/0
  3589 ;;		On exit  : 0/0
  3590 ;;		Unchanged: 0/0
  3591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3592 ;;      Params:         0       0       0       0       0       0       0       0       0
  3593 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3594 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3595 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3596 ;;Total ram usage:        1 bytes
  3597 ;; Hardware stack levels used:    1
  3598 ;; Hardware stack levels required when called:    2
  3599 ;; This function calls:
  3600 ;;		_I2C_Master_Start
  3601 ;;		_I2C_Master_Stop
  3602 ;;		_I2C_Master_Write
  3603 ;; This function is called by:
  3604 ;;		_LCD_Init
  3605 ;;		_LCD_Write_4Bit
  3606 ;;		_Backlight
  3607 ;;		_noBacklight
  3608 ;; This function uses a non-reentrant model
  3609 ;;
  3610                           
  3611                           	psect	text24
  3612  001778                     __ptext24:
  3613                           	opt callstack 0
  3614  001778                     _IO_Expander_Write:
  3615                           	opt callstack 24
  3616                           
  3617                           ;incstack = 0
  3618                           ;IO_Expander_Write@Data stored from wreg
  3619  001778  6E03               	movwf	IO_Expander_Write@Data^0,c
  3620  00177A                     
  3621                           ;lcdi2c.c: 104: void IO_Expander_Write(unsigned char Data);lcdi2c.c: 105: {;lcdi2c.c: 10
      +                          6:   I2C_Master_Start();
  3622  00177A  EC0C  F00C         	call	_I2C_Master_Start	;wreg free
  3623                           
  3624                           ;lcdi2c.c: 107:   I2C_Master_Write(i2c_add);
  3625  00177E  0100               	movlb	0	; () banked
  3626  001780  51A2               	movf	_i2c_add& (0+255),w,b
  3627  001782  ECE7  F00B         	call	_I2C_Master_Write
  3628                           
  3629                           ;lcdi2c.c: 108:   I2C_Master_Write(Data | BackLight_State);
  3630  001786  5003               	movf	IO_Expander_Write@Data^0,w,c
  3631  001788  0100               	movlb	0	; () banked
  3632  00178A  11A3               	iorwf	_BackLight_State& (0+255),w,b
  3633  00178C  ECE7  F00B         	call	_I2C_Master_Write
  3634                           
  3635                           ;lcdi2c.c: 109:   I2C_Master_Stop();
  3636  001790  EC08  F00C         	call	_I2C_Master_Stop	;wreg free
  3637  001794  0012               	return		;funcret
  3638  001796                     __end_of_IO_Expander_Write:
  3639                           	opt callstack 0
  3640                           
  3641 ;; *************** function _I2C_Master_Write *****************
  3642 ;; Defined at:
  3643 ;;		line 57 in file "lcdi2c.c"
  3644 ;; Parameters:    Size  Location     Type
  3645 ;;  data            1    wreg     unsigned char 
  3646 ;; Auto vars:     Size  Location     Type
  3647 ;;  data            1    1[COMRAM] unsigned char 
  3648 ;; Return value:  Size  Location     Type
  3649 ;;                  1    wreg      unsigned char 
  3650 ;; Registers used:
  3651 ;;		wreg, status,2, status,0, cstack
  3652 ;; Tracked objects:
  3653 ;;		On entry : 0/0
  3654 ;;		On exit  : 0/0
  3655 ;;		Unchanged: 0/0
  3656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3657 ;;      Params:         0       0       0       0       0       0       0       0       0
  3658 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3659 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3660 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3661 ;;Total ram usage:        1 bytes
  3662 ;; Hardware stack levels used:    1
  3663 ;; Hardware stack levels required when called:    1
  3664 ;; This function calls:
  3665 ;;		_I2C_Master_Wait
  3666 ;; This function is called by:
  3667 ;;		_IO_Expander_Write
  3668 ;; This function uses a non-reentrant model
  3669 ;;
  3670                           
  3671                           	psect	text25
  3672  0017CE                     __ptext25:
  3673                           	opt callstack 0
  3674  0017CE                     _I2C_Master_Write:
  3675                           	opt callstack 24
  3676                           
  3677                           ;incstack = 0
  3678                           ;I2C_Master_Write@data stored from wreg
  3679  0017CE  6E02               	movwf	I2C_Master_Write@data^0,c
  3680  0017D0                     
  3681                           ;lcdi2c.c: 57: unsigned char I2C_Master_Write(unsigned char data);lcdi2c.c: 58: {;lcdi2c
      +                          .c: 59:   I2C_Master_Wait();
  3682  0017D0  EC99  F00B         	call	_I2C_Master_Wait	;wreg free
  3683  0017D4                     
  3684                           ;lcdi2c.c: 60:   SSPBUF = data;
  3685  0017D4  C002  FFC9         	movff	I2C_Master_Write@data,4041	;volatile
  3686  0017D8                     l69:
  3687  0017D8  A69E               	btfss	3998,3,c	;volatile
  3688  0017DA  EFF1  F00B         	goto	u921
  3689  0017DE  EFF3  F00B         	goto	u920
  3690  0017E2                     u921:
  3691  0017E2  EFEC  F00B         	goto	l69
  3692  0017E6                     u920:
  3693  0017E6                     
  3694                           ;lcdi2c.c: 62:   SSPIF = 0;
  3695  0017E6  969E               	bcf	3998,3,c	;volatile
  3696  0017E8  0012               	return		;funcret
  3697  0017EA                     __end_of_I2C_Master_Write:
  3698                           	opt callstack 0
  3699                           
  3700 ;; *************** function _I2C_Master_Stop *****************
  3701 ;; Defined at:
  3702 ;;		line 37 in file "lcdi2c.c"
  3703 ;; Parameters:    Size  Location     Type
  3704 ;;		None
  3705 ;; Auto vars:     Size  Location     Type
  3706 ;;		None
  3707 ;; Return value:  Size  Location     Type
  3708 ;;                  1    wreg      void 
  3709 ;; Registers used:
  3710 ;;		wreg, status,2, status,0, cstack
  3711 ;; Tracked objects:
  3712 ;;		On entry : 0/0
  3713 ;;		On exit  : 0/0
  3714 ;;		Unchanged: 0/0
  3715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3716 ;;      Params:         0       0       0       0       0       0       0       0       0
  3717 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3718 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3719 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3720 ;;Total ram usage:        0 bytes
  3721 ;; Hardware stack levels used:    1
  3722 ;; Hardware stack levels required when called:    1
  3723 ;; This function calls:
  3724 ;;		_I2C_Master_Wait
  3725 ;; This function is called by:
  3726 ;;		_IO_Expander_Write
  3727 ;; This function uses a non-reentrant model
  3728 ;;
  3729                           
  3730                           	psect	text26
  3731  001810                     __ptext26:
  3732                           	opt callstack 0
  3733  001810                     _I2C_Master_Stop:
  3734                           	opt callstack 24
  3735  001810                     
  3736                           ;lcdi2c.c: 39:   I2C_Master_Wait();
  3737  001810  EC99  F00B         	call	_I2C_Master_Wait	;wreg free
  3738  001814                     
  3739                           ;lcdi2c.c: 40:   PEN = 1;
  3740  001814  84C5               	bsf	4037,2,c	;volatile
  3741  001816  0012               	return		;funcret
  3742  001818                     __end_of_I2C_Master_Stop:
  3743                           	opt callstack 0
  3744                           
  3745 ;; *************** function _I2C_Master_Start *****************
  3746 ;; Defined at:
  3747 ;;		line 25 in file "lcdi2c.c"
  3748 ;; Parameters:    Size  Location     Type
  3749 ;;		None
  3750 ;; Auto vars:     Size  Location     Type
  3751 ;;		None
  3752 ;; Return value:  Size  Location     Type
  3753 ;;                  1    wreg      void 
  3754 ;; Registers used:
  3755 ;;		wreg, status,2, status,0, cstack
  3756 ;; Tracked objects:
  3757 ;;		On entry : 0/0
  3758 ;;		On exit  : 0/0
  3759 ;;		Unchanged: 0/0
  3760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3761 ;;      Params:         0       0       0       0       0       0       0       0       0
  3762 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3763 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3764 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3765 ;;Total ram usage:        0 bytes
  3766 ;; Hardware stack levels used:    1
  3767 ;; Hardware stack levels required when called:    1
  3768 ;; This function calls:
  3769 ;;		_I2C_Master_Wait
  3770 ;; This function is called by:
  3771 ;;		_IO_Expander_Write
  3772 ;; This function uses a non-reentrant model
  3773 ;;
  3774                           
  3775                           	psect	text27
  3776  001818                     __ptext27:
  3777                           	opt callstack 0
  3778  001818                     _I2C_Master_Start:
  3779                           	opt callstack 24
  3780  001818                     
  3781                           ;lcdi2c.c: 27:   I2C_Master_Wait();
  3782  001818  EC99  F00B         	call	_I2C_Master_Wait	;wreg free
  3783  00181C                     
  3784                           ;lcdi2c.c: 28:   SEN = 1;
  3785  00181C  80C5               	bsf	4037,0,c	;volatile
  3786  00181E  0012               	return		;funcret
  3787  001820                     __end_of_I2C_Master_Start:
  3788                           	opt callstack 0
  3789                           
  3790 ;; *************** function _I2C_Master_Wait *****************
  3791 ;; Defined at:
  3792 ;;		line 20 in file "lcdi2c.c"
  3793 ;; Parameters:    Size  Location     Type
  3794 ;;		None
  3795 ;; Auto vars:     Size  Location     Type
  3796 ;;		None
  3797 ;; Return value:  Size  Location     Type
  3798 ;;                  1    wreg      void 
  3799 ;; Registers used:
  3800 ;;		wreg, status,2, status,0
  3801 ;; Tracked objects:
  3802 ;;		On entry : 0/0
  3803 ;;		On exit  : 0/0
  3804 ;;		Unchanged: 0/0
  3805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3806 ;;      Params:         0       0       0       0       0       0       0       0       0
  3807 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3808 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3809 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3810 ;;Total ram usage:        1 bytes
  3811 ;; Hardware stack levels used:    1
  3812 ;; This function calls:
  3813 ;;		Nothing
  3814 ;; This function is called by:
  3815 ;;		_I2C_Master_Start
  3816 ;;		_I2C_Master_Stop
  3817 ;;		_I2C_Master_Write
  3818 ;;		_I2C_Master_RepeatedStart
  3819 ;;		_I2C_ACK
  3820 ;;		_I2C_NACK
  3821 ;;		_I2C_Read_Byte
  3822 ;; This function uses a non-reentrant model
  3823 ;;
  3824                           
  3825                           	psect	text28
  3826  001732                     __ptext28:
  3827                           	opt callstack 0
  3828  001732                     _I2C_Master_Wait:
  3829                           	opt callstack 24
  3830  001732                     l48:
  3831  001732  B4C7               	btfsc	199,2,c	;volatile
  3832  001734  EF9E  F00B         	goto	u721
  3833  001738  EFA0  F00B         	goto	u720
  3834  00173C                     u721:
  3835  00173C  EF99  F00B         	goto	l48
  3836  001740                     u720:
  3837  001740  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  3838  001744  0E1F               	movlw	31
  3839  001746  1601               	andwf	??_I2C_Master_Wait^0,f,c
  3840  001748  A4D8               	btfss	status,2,c
  3841  00174A  EFA9  F00B         	goto	u731
  3842  00174E  EFAB  F00B         	goto	u730
  3843  001752                     u731:
  3844  001752  EF99  F00B         	goto	l48
  3845  001756                     u730:
  3846  001756  0012               	return		;funcret
  3847  001758                     __end_of_I2C_Master_Wait:
  3848                           	opt callstack 0
  3849                           
  3850 ;; *************** function _I2C_Master_Init *****************
  3851 ;; Defined at:
  3852 ;;		line 10 in file "lcdi2c.c"
  3853 ;; Parameters:    Size  Location     Type
  3854 ;;		None
  3855 ;; Auto vars:     Size  Location     Type
  3856 ;;		None
  3857 ;; Return value:  Size  Location     Type
  3858 ;;                  1    wreg      void 
  3859 ;; Registers used:
  3860 ;;		wreg, status,2
  3861 ;; Tracked objects:
  3862 ;;		On entry : 0/0
  3863 ;;		On exit  : 0/0
  3864 ;;		Unchanged: 0/0
  3865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3866 ;;      Params:         0       0       0       0       0       0       0       0       0
  3867 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3868 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3869 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3870 ;;Total ram usage:        0 bytes
  3871 ;; Hardware stack levels used:    1
  3872 ;; This function calls:
  3873 ;;		Nothing
  3874 ;; This function is called by:
  3875 ;;		_main
  3876 ;; This function uses a non-reentrant model
  3877 ;;
  3878                           
  3879                           	psect	text29
  3880  0017EA                     __ptext29:
  3881                           	opt callstack 0
  3882  0017EA                     _I2C_Master_Init:
  3883                           	opt callstack 30
  3884  0017EA                     
  3885                           ;lcdi2c.c: 12:   SSPCON1 = 0x28;
  3886  0017EA  0E28               	movlw	40
  3887  0017EC  6EC6               	movwf	198,c	;volatile
  3888                           
  3889                           ;lcdi2c.c: 13:   SSPCON2 = 0x00;
  3890  0017EE  0E00               	movlw	0
  3891  0017F0  6EC5               	movwf	197,c	;volatile
  3892                           
  3893                           ;lcdi2c.c: 14:   SSPSTAT = 0x00;
  3894  0017F2  0E00               	movlw	0
  3895  0017F4  6EC7               	movwf	199,c	;volatile
  3896                           
  3897                           ;lcdi2c.c: 15:   SSPADD = ((1000000/4)/100000) - 1;
  3898  0017F6  0E01               	movlw	1
  3899  0017F8  6EC8               	movwf	200,c	;volatile
  3900  0017FA                     
  3901                           ;lcdi2c.c: 16:   TRISBbits.RB1 = 1;
  3902  0017FA  8293               	bsf	147,1,c	;volatile
  3903  0017FC                     
  3904                           ;lcdi2c.c: 17:   TRISBbits.RB0 = 1;
  3905  0017FC  8093               	bsf	147,0,c	;volatile
  3906  0017FE  0012               	return		;funcret
  3907  001800                     __end_of_I2C_Master_Init:
  3908                           	opt callstack 0
  3909                           
  3910                           	psect	rparam
  3911  0000                     tosu	equ	0xFFF
  3912                           tosh	equ	0xFFE
  3913                           tosl	equ	0xFFD
  3914                           stkptr	equ	0xFFC
  3915                           pclatu	equ	0xFFB
  3916                           pclath	equ	0xFFA
  3917                           pcl	equ	0xFF9
  3918                           tblptru	equ	0xFF8
  3919                           tblptrh	equ	0xFF7
  3920                           tblptrl	equ	0xFF6
  3921                           tablat	equ	0xFF5
  3922                           prodh	equ	0xFF4
  3923                           prodl	equ	0xFF3
  3924                           indf0	equ	0xFEF
  3925                           postinc0	equ	0xFEE
  3926                           postdec0	equ	0xFED
  3927                           preinc0	equ	0xFEC
  3928                           plusw0	equ	0xFEB
  3929                           fsr0h	equ	0xFEA
  3930                           fsr0l	equ	0xFE9
  3931                           wreg	equ	0xFE8
  3932                           indf1	equ	0xFE7
  3933                           postinc1	equ	0xFE6
  3934                           postdec1	equ	0xFE5
  3935                           preinc1	equ	0xFE4
  3936                           plusw1	equ	0xFE3
  3937                           fsr1h	equ	0xFE2
  3938                           fsr1l	equ	0xFE1
  3939                           bsr	equ	0xFE0
  3940                           indf2	equ	0xFDF
  3941                           postinc2	equ	0xFDE
  3942                           postdec2	equ	0xFDD
  3943                           preinc2	equ	0xFDC
  3944                           plusw2	equ	0xFDB
  3945                           fsr2h	equ	0xFDA
  3946                           fsr2l	equ	0xFD9
  3947                           status	equ	0xFD8


Data Sizes:
    Strings     5
    Constant    0
    Data        1
    BSS         49
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     17      68
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 2
		 -> LCD_Write_Convert_String@text(BANK0[2]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 2
		 -> LCD_Write_Convert_String@text(BANK0[2]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    S693_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 2
		 -> LCD_Write_Convert_String@text(BANK0[2]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 2
		 -> LCD_Write_Convert_String@text(BANK0[2]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    LCD_Write_String@Str	PTR unsigned char  size(2) Largest target is 2
		 -> STR_2(CODE[2]), 


Critical Paths under _main in COMRAM

    _escreve_LCD->_LCD_Write_Convert_String
    _LCD_Write_Convert_String->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _LCD_Write_String->_LCD_Write_Char
    _LCD_Write_Char->_LCD_Write_4Bit
    _LCD_Set_Cursor->_LCD_CMD
    _LCD_Init->_LCD_CMD
    _LCD_Clear->_LCD_CMD
    _LCD_CMD->_LCD_Write_4Bit
    _LCD_Write_4Bit->_IO_Expander_Write
    _IO_Expander_Write->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_escreve_LCD
    _escreve_LCD->_LCD_Write_Convert_String
    _LCD_Write_Convert_String->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    9655
                                             16 BANK0      1     1      0
                    _I2C_Master_Init
                          _LCD_Clear
                           _LCD_Init
                     _LCD_Set_Cursor
                   _LCD_Write_String
                        _escreve_LCD
 ---------------------------------------------------------------------------------
 (1) _escreve_LCD                                          2     0      2    8629
                                             14 BANK0      2     0      2
           _LCD_Write_Convert_String
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     752
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     604
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_Convert_String                             6     4      2    7033
                                             93 COMRAM     2     0      2
                                             10 BANK0      4     4      0
                     _LCD_Write_Char
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             16    10      6    6456
                                             87 COMRAM     6     0      6
                                              0 BANK0     10    10      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (4) _vfprintf                                             8     2      6    6105
                                             79 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (5) _vfpfcnvrt                                           42    36      6    5751
                                             63 COMRAM    16    10      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _dtoa                                                36    26     10    4358
                                             27 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (7) _pad                                                 11     5      6    2709
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (8) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (7) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (7) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (7) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _LCD_Write_String                                     6     4      2     299
                                              5 COMRAM     6     4      2
                     _LCD_Write_Char
 ---------------------------------------------------------------------------------
 (3) _LCD_Write_Char                                       1     1      0     133
                                              4 COMRAM     1     1      0
                     _LCD_Write_4Bit
 ---------------------------------------------------------------------------------
 (1) _LCD_Set_Cursor                                       4     3      1     395
                                              5 COMRAM     4     3      1
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0     199
                                              5 COMRAM     2     2      0
                  _IO_Expander_Write
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            0     0      0     133
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _LCD_CMD                                              1     1      0     133
                                              4 COMRAM     1     1      0
                     _LCD_Write_4Bit
 ---------------------------------------------------------------------------------
 (4) _LCD_Write_4Bit                                       1     1      0      89
                                              3 COMRAM     1     1      0
                  _IO_Expander_Write
 ---------------------------------------------------------------------------------
 (5) _IO_Expander_Write                                    1     1      0      44
                                              2 COMRAM     1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Write                                     1     1      0      22
                                              1 COMRAM     1     1      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
   _LCD_Clear
     _LCD_CMD
       _LCD_Write_4Bit
         _IO_Expander_Write
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
   _LCD_Init
     _IO_Expander_Write
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _LCD_CMD
       _LCD_Write_4Bit
         _IO_Expander_Write
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
   _LCD_Set_Cursor
     _LCD_CMD
       _LCD_Write_4Bit
         _IO_Expander_Write
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
   _LCD_Write_String
     _LCD_Write_Char
       _LCD_Write_4Bit
         _IO_Expander_Write
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
   _escreve_LCD
     _LCD_Write_Convert_String
       _LCD_Write_Char
         _LCD_Write_4Bit
           _IO_Expander_Write
             _I2C_Master_Start
               _I2C_Master_Wait
             _I2C_Master_Stop
               _I2C_Master_Wait
             _I2C_Master_Write
               _I2C_Master_Wait
       _sprintf
         _vfprintf
           _vfpfcnvrt
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
             _fputc
               _putch
     ___awdiv
     ___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     11      44       5       42.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A3      20        0.0%
DATA                 0      0      A3       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Wed Apr 27 17:45:25 2022

                               l51 1756                                 l60 1816  
                               l45 17FE                                 l54 181E  
                               l71 17E6                                 l48 1732  
                               l72 17E8                                 l81 133A  
                               l90 17CC                                 l84 1794  
                               l69 17D8                                 l93 17B0  
                               l87 1776                                 _RS 0070  
                     ___awdiv@sign 0006                        __CFG_BOR$ON 000000  
                      __CFG_BORV$3 000000                       __CFG_CP0$OFF 000000  
                     __CFG_CP1$OFF 000000                       __CFG_CP2$OFF 000000  
                     __CFG_CP3$OFF 000000                        __CFG_LVP$ON 000000  
                              l110 15A6                                l104 15FC  
                              l201 109A                                l204 10DC  
                              l212 08A8                                l134 180E  
                              l206 1118                                l214 08B0  
                              l119 14E4                                l232 0AE8  
                              l161 147A                                l245 153E  
                              l246 1546                                l239 0C9C  
                              l363 0E24                                l376 0F88  
                              l480 11DC                                l493 128C  
                              l924 16CA                                l927 16D2  
                              l954 164E                                l939 1052  
                              l947 1692                                l963 1708  
                              l957 1820                       __CFG_CPB$OFF 000000  
                              _PEN 007E2A                       __CFG_CPD$OFF 000000  
                              u700 1692                                u701 168E  
                              u710 16FC                                u711 16F8  
                              u720 1740                                u800 0CE2  
                              u721 173C                                u801 0CDE  
                              u730 1756                                u731 1752  
                              u811 0D0C                                u820 0D30  
                              u900 0F00                                u660 0F9C  
                              u740 1064                                _SEN 007E28  
                              u821 0D2C                                u901 0EFC  
                              u661 0F98                                u741 1060  
                              u830 0D5A                                u910 0F48  
                              u670 0FAE                                u750 1086  
                              u831 0D56                                u911 0F44  
                              u671 0FAA                                u751 1082  
                              u920 17E6                                u840 0D9A  
                              u680 0FD6                                u760 10DC  
                              u921 17E2                                u841 0D96  
                              u681 0FD2                                u761 10D8  
                              u850 0DE4                                u690 100C  
                              u770 10EC                                u930 0838  
                              u851 0DE0                                u691 1008  
                              u771 10E8                                u931 0832  
                              u860 0E38                                u780 16AE  
                              u940 083A                                u861 0E34  
                              u781 16AA                                u790 0CB0  
                              u870 0E6A                                u950 0850  
                              u791 0CAC                                u871 0E66  
                              u951 084C                                u880 0EA8  
                              u960 0880                                u881 0EA4  
                              u961 087C                                u890 0ED2  
                              u970 089C                                u891 0ECE  
                              u971 0898                                u980 08CA  
                              u981 08C6                                u990 08D8  
                              u991 08D4                                _abs 1694  
                              _dir 006C                                _pad 1054  
                              _esq 006E                       ___awmod@sign 0006  
                              wreg 000FE8                    __end_of_LCD_CMD 17CE  
              LCD_Write_String@Str 0006                     _LCD_Set_Cursor 147C  
                     __CFG_WDT$OFF 000000                               ?_abs 0013  
                             l2041 133C                               l2051 1368  
                             l2043 134E                               l2061 139E  
                             l2053 1384                               l2045 1352  
                             l2063 13AA                               l2055 138C  
                             l2047 1358                               l1601 0D02  
                             l2065 13B6                               l2057 1390  
                             l2049 1362                               l1611 0D4C  
                             l1603 0D06                               l1531 0FAE  
                             l2067 13C2                               l2059 1394  
                             l1621 0DBC                               l1613 0D5A  
                             l1605 0D12                               l1533 0FB8  
                             l1541 1650                               l1701 08DE  
                             l1623 0DCE                               l1615 0D6C  
                             l1607 0D30                               l1535 0FD6  
                             l1527 0F8A                               l1543 165C  
                             l1551 16E0                               l1711 097C  
                             l1703 08E6                               l1561 1740  
                             l2089 14C6                               l1617 0D9A  
                             l1609 0D38                               l1625 0DD4  
                             l1641 0E5C                               l1633 0E26  
                             l1537 100C                               l1529 0F9C  
                             l1545 166E                               l1553 16E4  
                             l1721 0A38                               l1713 0982  
                             l1705 08EE                               l1801 1522  
                             l1803 1798                               l1627 0DE4  
                             l1619 0DBA                               l1651 0EC4  
                             l1643 0E6A                               l1635 0E2A  
                             l1547 1672                               l1555 16FC  
                             l1571 1092                               l1563 1054  
                             l1731 0A8A                               l1723 0A52  
                             l1707 08F4                               l1715 09E6  
                             l1811 1610                               l1821 17B4  
                             l1805 179E                               l1629 0E04  
                             l1653 0ED2                               l1661 0F38  
                             l1645 0E8A                               l1637 0E38  
                             l1549 16D4                               l1581 1100  
                             l1573 10A6                               l1565 1064  
                             l1733 0A9C                               l1717 0A00  
                             l1725 0A62                               l1709 0976  
                             l1813 1618                               l1901 1242  
                             l1559 1732                               l1671 181C  
                             l1743 177A                               l1823 17BA  
                             l1807 17A6                               l1591 0CA2  
                             l1663 0F48                               l1655 0F00  
                             l1647 0EA8                               l1639 0E58  
                             l1575 10BA                               l1567 1078  
                             l1735 0AA8                               l1727 0A74  
                             l1719 0A1E                               l1751 0B2E  
                             l1815 1620                               l1831 1572  
                             l1911 127C                               l1903 1258  
                             l1921 17FC                               l1673 1810  
                             l1825 17C2                               l1593 0CB0  
                             l1665 0F68                               l1657 0F20  
                             l1649 0EB0                               l1585 1694  
                             l1577 10BE                               l1569 1086  
                             l1737 0AB0                               l1729 0A84  
                             l1681 0808                               l1753 0B32  
                             l1745 0AEA                               l1817 163C  
                             l1809 15FE                               l1833 1584  
                             l1841 112C                               l1913 1284  
                             l1905 1260                               l1675 1814  
                             l1931 12B8                               l1923 1290  
                             l1595 0CD0                               l1659 0F32  
                             l1587 16AE                               l1579 10EC  
                             l1739 0AC0                               l1691 0882  
                             l1683 0828                               l1763 0BFA  
                             l1755 0B56                               l1747 0B0E  
                             l1835 158A                               l1827 1548  
                             l1851 1152                               l1843 1134  
                             l1907 1266                               l1917 17EA  
                             l1669 1818                               l1677 17D0  
                             l1941 12F8                               l1933 12C6  
                             l1925 1294                               l1597 0CD4  
                             l1589 0C9E                               l1693 089C  
                             l1685 0850                               l1781 0C8A  
                             l1765 0C1E                               l1773 0C4C  
                             l1757 0B7A                               l1749 0B1C  
                             l1829 1564                               l1861 118A  
                             l1853 115A                               l1845 1138  
                             l1837 111A                               l1909 126C  
                             l1919 17FA                               l1679 17D4  
                             l1791 1768                               l1943 12FE  
                             l1935 12CC                               l1927 129A  
                             l1951 15B4                               l1599 0CE2  
                             l1695 08B8                               l1687 0870  
                             l1775 0C5A                               l1767 0C2C  
                             l1759 0BC2                               l1871 11B6  
                             l1863 1190                               l1855 116C  
                             l1847 1146                               l1839 111E  
                             l1793 1770                               l1945 1314  
                             l1937 12DA                               l1929 12B0  
                             l1961 148E                               l1953 15D0  
                             l1697 08CA                               l1689 0880  
                             l1769 0C40                               l1865 11A6  
                             l1857 1174                               l1873 11BC  
                             l1849 114E                               l1881 11DE  
                             l1787 175A                               l1947 1324  
                             l1939 12E2                               l1963 149A  
                             l1955 15D4                               l1699 08D8  
                             l1779 0C66                               l1795 14E6  
                             l1875 11CC                               l1867 11AE  
                             l1859 117C                               l1891 120A  
                             l1883 11E2                               l1789 1760  
                             l1973 1800                               l1965 14A6  
                             l1957 147E                               l1949 15A8  
                             l1797 14EE                               l1877 11D4  
                             l1869 11B0                               l1893 1212  
                             l1885 11F0                               l1981 1406  
                             ?_pad 0011                               l1975 1806  
                             l1959 1482                               l1967 14B2  
                             l1799 14FC                               l1895 1224  
                             l1887 11F8                               l1983 1422  
                             l1897 122C                               l1889 11FC  
                             l1985 1432                               l1977 13DC  
                             l1899 1234                               l1987 146A  
                             l1979 13FA                       ?_escreve_LCD 009F  
                             STR_1 0801                               STR_2 0804  
                             u1000 0A00                               u1001 09FC  
                             u1010 0A1E                               u1011 0A1A  
                             u1020 0A38                               u1100 0B7A  
                             u1021 0A34                               u1101 0B76  
                             u1030 0A52                               u1110 0C1E  
                             u1031 0A4E                               u1111 0C1A  
                             u1040 0A62                               u1120 153E  
                             u1200 11F0                               u1041 0A5E  
                             u1121 153A                               u1201 11EC  
                             u1050 0A74                               u1130 15A6  
                             u1210 120A                               u1051 0A70  
                             u1131 15A2                               u1211 1206  
                             u1060 0A84                               u1140 112C  
                             u1220 1224                               u1300 1384  
                             u1061 0A80                               u1141 1128  
                             u1221 1220                               u1301 1380  
                             u1070 0A9C                               u1150 1146  
                             u1230 1242                               u1071 0A98  
                             u1151 1142                               u1231 123E  
                             u1080 0B0E                               u1160 116C  
                             u1240 1258                               u1081 0B0A  
                             u1161 1168                               u1241 1254  
                             u1090 0B56                               u1170 118A  
                             u1250 127C                               u1091 0B52  
                             u1171 1186                               u1251 1278  
                             u1260 15FC                               u1180 11A6  
                             u1261 15F8                               u1181 11A2  
                             u1317 13CA                               u1190 11CC  
                             u1270 13FA                               u1407 1330  
                             u1327 12A0                               u1191 11C8  
                             u1271 13F6                               u1417 1808  
                             u1337 12B2                               u1427 1772  
                             u1347 12C0                               u1357 12CE  
                             u1367 12DC                               u1377 12EE  
                             u1387 1304                               u1397 131A  
                             _RCEN 007E2B                               _RSEN 007E29  
                ?_LCD_Write_String 0006                               abs@a 0013  
                             _dbuf 0071                               _main 133C  
                             _dtoa 0808                 __size_of_LCD_Clear 0010  
                             _prec 0064                               _nout 0060  
                             pad@i 0018                               pad@p 0015  
                             fsr1h 000FE2                               fsr2h 000FDA  
                             indf2 000FDF                               fsr1l 000FE1  
                             pad@w 001A                               fsr2l 000FD9  
                             start 0000                 ??_LCD_Write_String 0008  
                    __CFG_IESO$OFF 000000                      __CFG_MCLRE$ON 000000  
                     ___param_bank 000000               LCD_Write_4Bit@Nibble 0004  
                            ??_abs 0015                              ??_pad 0017  
                 __end_of_LCD_Init 133C                   ?_I2C_Master_Init 0001  
                    __CFG_PLLDIV$1 000000                   ?_I2C_Master_Wait 0001  
                 ?_I2C_Master_Stop 0001                     __CFG_CCP2MX$ON 000000  
                  __end_of___aodiv 0E26                              ?_main 0001  
                            ?_dtoa 001C                    __end_of___aomod 0F8A  
                            _ACKEN 007E2C                              _ACKDT 007E2D  
                  __end_of___awdiv 11DE                    __end_of___awmod 128E  
                  ___awdiv@divisor 0003                    ___awdiv@counter 0005  
                     vfpfcnvrt@fmt 0042                      __CFG_USBDIV$1 000000  
                            _SSPIF 007CF3                      __CFG_PWRT$OFF 000000  
                    __CFG_WRT0$OFF 000000                      __CFG_WRT1$OFF 000000  
                    __CFG_WRT2$OFF 000000                      __CFG_WRT3$OFF 000000  
                   __CFG_EBTR0$OFF 000000                     __CFG_FCMEN$OFF 000000  
                   __CFG_EBTR1$OFF 000000             __end_of_LCD_Set_Cursor 14E6  
                   __CFG_EBTR2$OFF 000000                     __CFG_EBTR3$OFF 000000  
                    __CFG_WRTB$OFF 000000                      __CFG_WRTC$OFF 000000  
                    __CFG_WRTD$OFF 000000                     __CFG_EBTRB$OFF 000000  
                            _flags 0066                              _fputc 0F8A  
                            _fputs 1650                              pad@fp 0011  
                            _width 0062                              _putch 1820  
                            dtoa@d 001E                              dtoa@i 003E  
                            dtoa@n 0036                              dtoa@p 0030  
                            dtoa@s 0034                              dtoa@w 0032  
                            tablat 000FF5                              status 000FD8  
                  __end_of_sprintf 1650                     __CFG_ICPRT$OFF 000000  
                   _LCD_Write_4Bit 1758                     _LCD_Write_Char 1796  
                  __initialization 170A                       __end_of_main 13DC  
                     __end_of_dtoa 0AEA                  _IO_Expander_Write 1778  
               ?_IO_Expander_Write 0001                             ??_main 00A1  
                           ??_dtoa 0026                  __end_of_LCD_Clear 1810  
                    __activetblptr 000002                          ??_LCD_CMD 0005  
                ?_I2C_Master_Start 0001                  ?_I2C_Master_Write 0001  
              ??_IO_Expander_Write 0003                    ?_LCD_Set_Cursor 0006  
               ??_I2C_Master_Start 0002                 ??_I2C_Master_Write 0002  
                           ?_fputc 0001                             ?_fputs 000A  
                 ___awdiv@dividend 0001                             ?_putch 0001  
                   __CFG_WDTPS$256 000000                             _SSPADD 000FC8  
                           _SSPBUF 000FC9             __end_of_LCD_Write_4Bit 1778  
           __end_of_LCD_Write_Char 17B2                     __CFG_XINST$OFF 000000  
        __end_of_IO_Expander_Write 1796                       vfprintf@cfmt 0056  
                        ??___aodiv 0011                          ??___aomod 0011  
                        ??___awdiv 0005                     __CFG_STVREN$ON 000000  
                        ??___awmod 0005                             clear_0 1722  
                 ___awdiv@quotient 0007                    ___awmod@divisor 0003  
                  ___awmod@counter 0005                             pad@buf 0013  
                           dtoa@fp 001C                             _strlen 16D4  
                           fputc@c 0001                             fputs@c 000E  
                           fputs@i 000F                             fputs@s 000A  
                     __mediumconst 0000                             tblptrh 000FF7  
                           tblptrl 000FF6                             tblptru 000FF8  
                           putch@c 0001                   __end_of_vfprintf 1548  
                        ??_sprintf 005E                         __accesstop 0060  
          __end_of__initialization 1728                          ?_LCD_Init 0001  
                  __CFG_PBADEN$OFF 000000               __size_of_escreve_LCD 00A0  
                  ?_LCD_Write_4Bit 0001                      ___rparam_used 000001  
                  ?_LCD_Write_Char 0001                     __pcstackCOMRAM 0001  
                     __pidataBANK0 1822                      __end_of_fputc 1054  
                    __end_of_fputs 1694                      __end_of_putch 1822  
     LCD_Write_Convert_String@text 009B                            ??_fputc 0005  
                          ??_fputs 000E                            ??_putch 0001  
                       __pbssBANK0 0060                         ??_LCD_Init 0006  
       __size_of_IO_Expander_Write 001E                            _ACKSTAT 007E2E  
        __size_of_LCD_Write_String 0056                            ?_strlen 0001  
                          _LCD_CMD 17B2  __size_of_LCD_Write_Convert_String 0060  
        ?_LCD_Write_Convert_String 005E                 __size_of_vfpfcnvrt 01B4  
                          _SSPCON1 000FC6                            _SSPCON2 000FC5  
                          _SSPSTAT 000FC7                    __CFG_VREGEN$OFF 000000  
                          _i2c_add 00A2                            __Hparam 0000  
                          __Lparam 0000                            ___aodiv 0C9E  
                          ___aomod 0E26                            ___awdiv 111A  
                          ___awmod 11DE                          ?_vfprintf 0050  
                     __psmallconst 0800                            __pcinit 170A  
                          __ramtop 0800                   ??_LCD_Set_Cursor 0007  
                          __ptext0 133C                            __ptext1 13DC  
                          __ptext2 11DE                            __ptext3 111A  
                          __ptext4 1548                            __ptext5 15FE  
                          __ptext6 14E6                            __ptext7 0AEA  
                          __ptext8 0808                            __ptext9 1054  
                  __size_of_strlen 0036                       __size_of_abs 0040  
                     __size_of_pad 00C6                   ___awmod@dividend 0001  
                          _minutos 006A           __size_of_I2C_Master_Init 0016  
         __size_of_I2C_Master_Wait 0026           __size_of_I2C_Master_Stop 0008  
                        _LCD_Clear 1800                            _sprintf 15FE  
             end_of_initialization 1728                            fputc@fp 0003  
                    __Lmediumconst 0000                            fputs@fp 000C  
        __size_of_I2C_Master_Start 0008          __size_of_I2C_Master_Write 001C  
                __end_of_vfpfcnvrt 0C9E                            postdec2 000FDD  
                          postinc0 000FEE                            postinc1 000FE6  
                          postinc2 000FDE                         ??_vfprintf 0056  
                          strlen@a 0003                            strlen@s 0001  
                       LCD_CMD@CMD 0005                          _TRISBbits 000F93  
                       ?_LCD_Clear 0001                   ??_LCD_Write_4Bit 0004  
                LCD_Write_String@i 000A                   ??_LCD_Write_Char 0005  
                __size_of_LCD_Init 00AE                        vfpfcnvrt@ap 0044  
                      vfpfcnvrt@fp 0040                        vfpfcnvrt@ll 0048  
                 _LCD_Write_String 15A8                     __end_of_strlen 170A  
              start_initialization 170A                        __end_of_abs 16D4  
                      __end_of_pad 111A                      ??_escreve_LCD 0060  
                ??_I2C_Master_Init 0001                  ??_I2C_Master_Wait 0001  
                ??_I2C_Master_Stop 0002                        vfprintf@fmt 0052  
 __end_of_LCD_Write_Convert_String 15A8                        __pdataBANK0 00A3  
                 __CFG_LPT1OSC$OFF 000000                           ??_strlen 0003  
                         ?_LCD_CMD 0001                      __pcstackBANK0 0091  
                 ___aodiv@dividend 0001                        ??_LCD_Clear 0006  
                        __pnvBANK0 00A2                   _I2C_Master_Start 1818  
                 _I2C_Master_Write 17CE                __end_of_escreve_LCD 147C  
            IO_Expander_Write@Data 0003                           ?___aodiv 0001  
                         ?___aomod 0001                           ?___awdiv 0001  
                 ___aodiv@quotient 0013                           ?___awmod 0001  
             I2C_Master_Write@data 0002                  __size_of_vfprintf 0062  
                      __smallconst 0800                           ?_sprintf 0058  
                   __size_of_fputc 00CA                     __size_of_fputs 0044  
                   __size_of_putch 0002                           _LCD_Init 128E  
   LCD_Write_Convert_String@numero 005E                          _vfpfcnvrt 0AEA  
         _LCD_Write_Convert_String 1548                   __size_of_LCD_CMD 001C  
                      _escreve_LCD 13DC           __end_of_LCD_Write_String 15FE  
                         __Hrparam 0000                         vfprintf@ap 0054  
                         __Lrparam 0000                         vfprintf@fp 0050  
                 __size_of___aodiv 0188                   __size_of___aomod 0164  
                 __size_of___awdiv 00C4                   __size_of___awmod 00B0  
                       ?_vfpfcnvrt 0040                    ___aodiv@divisor 0009  
                  ___aodiv@counter 0011                         sprintf@fmt 005A  
                  _I2C_Master_Init 17EA                    _I2C_Master_Wait 1732  
                  _I2C_Master_Stop 1810                           _dtoa$232 002E  
        LCD_Write_Convert_String@i 009D                           __ptext10 16D4  
                         __ptext11 1650                           __ptext20 128E  
                         __ptext12 0F8A                           __ptext21 1800  
                         __ptext13 1820                           __ptext22 17B2  
                         __ptext14 1694                           __ptext23 1758  
                         __ptext15 0E26                           __ptext24 1778  
                         __ptext16 0C9E                           __ptext25 17CE  
                         __ptext17 15A8                           __ptext26 1810  
                         __ptext18 1796                           __ptext27 1818  
                         __ptext19 147C                           __ptext28 1732  
                         __ptext29 17EA            __size_of_LCD_Set_Cursor 006A  
                 __size_of_sprintf 0052                    _BackLight_State 00A3  
                    __size_of_main 00A0                      __size_of_dtoa 02E2  
                         _segundos 0068                           _vfprintf 14E6  
                escreve_LCD@numero 009F                   ___aomod@dividend 0001  
            __CFG_CPUDIV$OSC1_PLL2 000000           __end_of_I2C_Master_Start 1820  
         __end_of_I2C_Master_Write 17EA                 LCD_Write_Char@Data 0005  
                        sprintf@ap 0093            __size_of_LCD_Write_4Bit 0020  
          __size_of_LCD_Write_Char 001C            __end_of_I2C_Master_Init 1800  
                  ___aomod@divisor 0009            __end_of_I2C_Master_Wait 1758  
          __end_of_I2C_Master_Stop 1818                        ??_vfpfcnvrt 0046  
                  ___aomod@counter 0011                    LCD_Init@I2C_Add 0007  
                         sprintf@f 0095                __CFG_FOSC$INTOSC_HS 000000  
                         sprintf@s 0058                  LCD_Set_Cursor@COL 0006  
                LCD_Set_Cursor@ROW 0009                       ___aodiv@sign 0012  
                     ___aomod@sign 0012         ??_LCD_Write_Convert_String 0060  
